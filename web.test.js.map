{"version":3,"sources":["../../../../mol/test/mol/test/test.test.ts","../../../../mol/test/mol/test/test.web.test.ts","../../../../mol/type/error/error.ts","../../../../mol/type/assert/assert.test.ts","../../../../mol/type/assert/assert.ts","../../../../mol/type/equals/equals.test.ts","../../../../mol/type/partial/deep/deep.test.ts","../../../../mol/jsx/mol/jsx/jsx.test.tsx","../../../../mol/compare/deep/mol/compare/deep/deep.test.tsx","../../../../mol/assert/mol/assert/assert.test.ts","../../../../mol/assert/mol/assert/assert.ts","../../../../mol/type/keys/extract/extract.test.ts","../../../../mol/log3/mol/log3/log3.test.ts","../../../../mol/func/name/mol/func/name/name.test.ts","../../../../mol/delegate/mol/delegate/delegate.test.ts","../../../../mol/type/writable/writable.test.ts","../../../../mol/wire/pub/sub/mol/wire/pub/sub/sub.test.ts","../../../../mol/after/mock/mol/after/mock/mock.test.ts","../../../../mol/after/frame/mol/after/frame/frame.test.ts","../../../../mol/wire/fiber/mol/wire/fiber/fiber.test.ts","../../../../mol/promise/mol/promise/promise.ts","../../../../mol/after/timeout/mol/after/timeout/timeout.test.ts","../../../../mol/after/timeout/mol/after/timeout/timeout.ts","../../../../mol/wait/timeout/mol/wait/timeout/timeout.ts","../../../../mol/wire/async/mol/wire/async/async.test.ts","../../../../mol/type/tail/tail.test.ts","../../../../mol/wire/solo/mol/wire/solo/solo.test.ts","../../../../mol/wire/plex/mol/wire/plex/plex.test.ts","../../../../mol/wire/probe/mol/wire/probe/probe.test.ts","../../../../mol/wire/probe/mol/wire/probe/probe.ts","../../../../mol/object/mol/object/object.test.ts","../../../../mol/state/local/mol/state/local/local.mock.test.ts","../../../../mol/state/local/mol/state/local/local.test.ts","../../../../mol/charset/encode/mol/charset/encode/encode.test.ts","../../../../mol/crypto/auditor/mol/crypto/auditor/auditor.web.test.ts","../../../../mol/reconcile/mol/reconcile/reconcile.test.tsx","../../../../mol/data/setup/mol/data/setup/setup.test.ts","../../../../mol/diff/path/mol/diff/path/path.test.ts","../../../../mol/data/enum/mol/data/enum/enum.test.ts","../../../../mol/charset/decode/mol/charset/decode/decode.test.ts","../../../crowd/unit/hyoo/crowd/unit/unit.test.ts","../../../../mol/type/merge/merge.test.ts","../../../../mol/type/intersect/intersect.test.ts","../../../../mol/regexp/mol/regexp/regexp.test.ts","../../../crowd/tokenizer/hyoo/crowd/tokenizer/tokenizer.test.ts","../../../crowd/text/hyoo/crowd/text/text.test.ts","../../../../mol/const/mol/const/const.test.ts","../../../../mol/key/mol/key/key.test.tsx","../../../../mol/dict/mol/dict/dict.test.tsx","../../../crowd/clock/hyoo/crowd/clock/clock.test.ts","../../../crowd/world/hyoo/crowd/world/world.test.ts","../../../../mol/wrapper/mol/wrapper/wrapper.test.ts","../../../../mol/memo/mol/memo/memo.test.ts","../../../crowd/land/hyoo/crowd/land/land.test.ts","../../../../mol/wire/log/mol/wire/log/log.ts","../../../../mol/wire/atom/mol/wire/atom/atom.test.ts","../../../crowd/json/hyoo/crowd/json/json.test.ts","../../../crowd/dom/hyoo/crowd/dom/dom.test.ts","../../../../mol/state/arg/mol/state/arg/arg.web.test.ts","../../../harp/to/string/hyoo/harp/to/string/string.ts","../../../harp/hyoo/harp/harp.test.ts"],"names":[],"mappings":"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","file":"web.test.js","sourcesContent":["namespace $ {\n\n\texport function $mol_test( set : { [ name : string ] : string | ( ( context : $ )=> void ) } ) {\n\t\t\n\t\tfor( let name in set ) {\n\n\t\t\tconst code = set[ name ]\n\t\t\tconst test = ( typeof code === 'string' ) ? new Function( '' , code ) as ()=> void : code\n\t\t\t\n\t\t\t$mol_test_all.push( test )\n\t\t}\n\n\t\t$mol_test_schedule()\n\t}\n\n\texport let $mol_test_mocks = [] as Array< ( context : $ )=> void >\n\n\texport const $mol_test_all = [] as Array< ( context : $ )=> any >\n\n\texport async function $mol_test_run() {\n\n\t\tfor( var test of $mol_test_all ) {\n\n\t\t\tlet context = Object.create( $$ )\n\t\t\tfor( let mock of $mol_test_mocks ) await mock( context )\n\t\t\t\n\t\t\tconst res = test( context )\n\t\t\tif( res instanceof Promise ) {\n\t\t\t\tawait new Promise( ( done, fail )=> {\n\t\t\t\t\tres.then( done, fail )\n\t\t\t\t\tsetTimeout( ()=> fail( new Error( 'Test timeout: ' + test.name ) ), 1000 )\n\t\t\t\t} )\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t$$.$mol_log3_done({\n\t\t\tplace: '$mol_test',\n\t\t\tmessage: 'All tests passed',\n\t\t\tcount: $mol_test_all.length,\n\t\t})\n\t\t\n\t}\n\t\n\tlet scheduled = false\n\texport function $mol_test_schedule() {\n\n\t\tif( scheduled ) return\n\t\tscheduled = true\n\n\t\tsetTimeout( async ()=> {\n\t\t\t\n\t\t\tscheduled = false\n \t\t\t\n\t\t\tawait $mol_test_run()\n\t\t\t$$.$mol_test_complete()\n\t\t\t\n\t\t} , 1000 )\n\t\t\n\t}\n\n\t$mol_test_mocks.push( context => {\n\t\tlet seed = 0\n\n\t\tcontext.Math = Object.create( Math )\n\t\tcontext.Math.random = ()=> Math.sin( seed++ )\n\n\t\tconst forbidden = [ 'XMLHttpRequest' , 'fetch' ]\n\n\t\tfor( let api of forbidden ) {\n\t\t\tcontext[ api ] = new Proxy( function(){} , {\n\t\t\t\tget() {\n\t\t\t\t\t$mol_fail_hidden( new Error( `${ api } is forbidden in tests` ) )\n\t\t\t\t} ,\n\t\t\t\tapply() {\n\t\t\t\t\t$mol_fail_hidden( new Error( `${ api } is forbidden in tests` ) )\n\t\t\t\t} ,\n\t\t\t} )\n\t\t}\n\t\t\n\t} )\n\n\t$mol_test({\n\n\t\t'mocked Math.random'( $ ) {\n\t\t\tconsole.assert( $.Math.random() === 0 )\n\t\t\tconsole.assert( $.Math.random() === Math.sin(1) )\n\t\t} ,\n\n\t\t'forbidden XMLHttpRequest'( $ ) {\n\t\t\ttry {\n\t\t\t\tconsole.assert( void new $.XMLHttpRequest )\n\t\t\t} catch( error: any ) {\n\t\t\t\tconsole.assert( error.message === 'XMLHttpRequest is forbidden in tests' )\n\t\t\t}\n\t\t} ,\n\n\t\t'forbidden fetch'( $ ) {\n\t\t\ttry {\n\t\t\t\tconsole.assert( void $.fetch('') )\n\t\t\t} catch( error: any ) {\n\t\t\t\tconsole.assert( error.message === 'fetch is forbidden in tests' )\n\t\t\t}\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\t\n\texport function $mol_test_complete() {\n\t}\n\t\n}\n",null,null,null,null,null,"/** @jsx $mol_jsx */\nnamespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Make empty div'() {\n\t\t\t$mol_assert_equal( (<div/>).outerHTML , '<div></div>' )\n\t\t} ,\n\t\t\n\t\t'Define native field'() {\n\t\t\t\n\t\t\tconst dom = <input value='123' /> as HTMLInputElement\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<input value=\"123\">' )\n\t\t\t$mol_assert_equal( dom.value, '123' )\n\n\t\t} ,\n\t\t\n\t\t'Define classes'() {\n\t\t\t\n\t\t\tconst dom = <div class={ 'foo bar' } />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div class=\"foo bar\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define styles'() {\n\t\t\t\n\t\t\tconst dom = <div style={{ color: 'red' }} />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div style=\"color: red;\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define dataset'() {\n\t\t\t\n\t\t\tconst dom = <div dataset={{ foo: 'bar' }} />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div data-foo=\"bar\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define attributes'() {\n\t\t\t\n\t\t\tconst dom = <div lang=\"ru\" hidden />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div lang=\"ru\" hidden=\"\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define child nodes'() {\n\n\t\t\tconst dom =\n\t\t\t\t<div>\n\t\t\t\t\thello\n\t\t\t\t\t<strong>world</strong>\n\t\t\t\t\t!\n\t\t\t\t</div>\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div>hello<strong>world</strong>!</div>' )\n\n\t\t} ,\n\n\t\t'Function as component'() {\n\n\t\t\tconst Button = (\n\t\t\t\tprops: { hint: string },\n\t\t\t\ttarget: ()=> string,\n\t\t\t) => {\n\t\t\t\treturn <button title={ props.hint } >{ target() }</button>\n\t\t\t}\n\n\t\t\tconst dom = <Button id=\"foo\" hint=\"click me\">{ ()=> 'hey!' }</Button>\n\n\t\t\t$mol_assert_equal( dom.outerHTML, '<button id=\"foo\" title=\"click me\" class=\"Button\">hey!</button>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Nested guid generation'() {\n\n\t\t\tconst Foo = ()=> {\n\t\t\t\treturn <div>\n\t\t\t\t\t<Bar id=\"bar\">\n\t\t\t\t\t\t<img id=\"icon\" />\n\t\t\t\t\t</Bar>\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\tconst Bar = ( props: {}, icon: Element )=> {\n\t\t\t\treturn <span>{ icon }<i id=\"label\"/></span>\n\t\t\t}\n\n\t\t\tconst dom = <Foo id=\"foo\" />\n\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div id=\"foo\" class=\"Foo\"><span id=\"foo/bar\" class=\"Foo_bar Bar\"><img id=\"foo/icon\" class=\"Foo_icon\"><i id=\"foo/bar/label\" class=\"Foo_bar_label Bar_label\"></i></span></div>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Fail on non unique ids'() {\n\n\t\t\tconst App = ()=> {\n\t\t\t\treturn <div>\n\t\t\t\t\t<span id=\"bar\" />\n\t\t\t\t\t<span id=\"bar\" />\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\t$mol_assert_fail( ()=> <App id=\"foo\" />, 'JSX already has tag with id \"foo/bar\"' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Owner based guid generationn'() {\n\n\t\t\tconst Foo = ()=> {\n\t\t\t\treturn <div>\n\t\t\t\t\t<Bar id=\"middle\" icon={ ()=> <img id=\"icon\" /> } />\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\tconst Bar = ( props: { icon: ()=> Element } )=> {\n\t\t\t\treturn <span>{ props.icon() }</span>\n\t\t\t}\n\n\t\t\tconst dom = <Foo id=\"app\" />\n\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div id=\"app\" class=\"Foo\"><span id=\"app/middle\" class=\"Foo_middle Bar\"><img id=\"app/icon\" class=\"Foo_icon\"></span></div>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Fail on same ids from different caller'() {\n\n\t\t\tconst Foo = ()=> {\n\t\t\t\treturn <div>\n\t\t\t\t\t<img id=\"icon\" />\n\t\t\t\t\t<Bar id=\"bar\" icon={ ()=> <img id=\"icon\" /> } />\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\tconst Bar = ( props: { icon: ()=> Element } )=> {\n\t\t\t\treturn <span>{ props.icon() }</span>\n\t\t\t}\n\n\t\t\t$mol_assert_fail( ()=> <Foo id=\"foo\" />, 'JSX already has tag with id \"foo/icon\"' )\n\t\t\t\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\n\t$mol_test({\n\n\t\t'nulls & undefineds'() {\n\n\t\t\t$mol_assert_ok( $mol_compare_deep( null , null ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( undefined , undefined ) )\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep( undefined , null ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( {} , null ) )\n\t\t\t\n\t\t} ,\n\n\t\t'number'() {\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_compare_deep( 1 , 1 ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( Number.NaN , Number.NaN ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( 1 , 2 ) )\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_compare_deep( Object( 1 ) , Object( 1 ) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( Object( 1 ) , Object( 2 ) ) )\n\t\t\t\n\t\t} ,\n\n\t\t'POJO'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( {} , {} ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( { a : 1 } , { b : 2 } ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( { a : 1 } , { a : 2 } ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( {} , { a : undefined } ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( { a: 1, b: 2 } , { b: 2, a: 1 } ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( { a : { b : 1 } } , { a : { b : 1 } } ) )\n\t\t} ,\n\n\t\t'Array'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( [] , [] ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( [ 1 , [2] ] , [ 1 , [2] ] ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( [ 1 , 2 ] , [ 1 , 3 ] ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( [ 1 , 2 , ] , [ 1 , 3 , undefined ] ) )\n\t\t} ,\n\n\t\t'Non POJO are different'() {\n\t\t\t\n\t\t\tclass Thing extends Object {}\n\t\t\t$mol_assert_not( $mol_compare_deep( new Thing , new Thing ) )\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep( ()=> 1 , ()=>1 ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new RangeError( 'Test error' ) , new RangeError( 'Test error' ) ) )\n\t\t\t\n\t\t} ,\n\n\t\t'same POJOs with cyclic reference'() {\n\n\t\t\tconst a = { foo : {} }\n\t\t\ta['self'] = a\n\n\t\t\tconst b = { foo : {} }\n\t\t\tb['self'] = b\n\n\t\t\t$mol_assert_ok( $mol_compare_deep( a , b ) )\n\n\t\t} ,\n\n\t\t'Date'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Date( 12345 ) , new Date( 12345 ) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Date( 12345 ) , new Date( 12346 ) ) )\n\t\t} ,\n\n\t\t'RegExp'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( /\\x22/mig , /\\x22/mig ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( /\\x22/mig , /\\x21/mig ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( /\\x22/mig , /\\x22/mg ) )\n\t\t} ,\n\n\t\t'Error'() {\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep( new Error( 'xxx' ) , new Error( 'xxx' ) ) )\n\n\t\t\tconst fail = ( message: string )=> new Error( message )\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_compare_deep(\n\t\t\t\t... [ 'xxx' , 'xxx' ].map( msg => new Error( msg ) ) as [ Error, Error ]\n\t\t\t) )\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep(\n\t\t\t\t... [ 'xxx' , 'yyy' ].map( msg => new Error( msg ) ) as [ Error, Error ]\n\t\t\t) )\n\t\t\t\n\t\t} ,\n\n\t\t'Map'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Map , new Map ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Map([ [ 1 , [2] ] ]) , new Map([ [ 1 , [2] ] ]) ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Map([ [ [1] , 2 ] ]) , new Map([ [ [1] , 2 ] ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Map([ [ 1 , 2 ] ]) , new Map([ [ 1 , 3 ] ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Map([ [ [1] , 2 ] ]) , new Map([ [ [3] , 2 ] ]) ) )\n\t\t} ,\n\t\t\n\t\t'Set'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Set , new Set ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Set([ 1 , [2] ]) , new Set([ 1 , [2] ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Set([ 1 ]) , new Set([ 2 ]) ) )\n\t\t} ,\n\t\t\n\t\t'Uint8Array'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Uint8Array , new Uint8Array ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Uint8Array([ 0 ]) , new Uint8Array([ 0 ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Uint8Array([ 0 ]) , new Uint8Array([ 1 ]) ) )\n\t\t} ,\n\t\t\n\t\t'Custom comparator'() {\n\t\t\t\n\t\t\tclass User {\n\t\t\t\t\n\t\t\t\tconstructor(\n\t\t\t\t\treadonly name: string,\n\t\t\t\t\treadonly rand = Math.random(),\n\t\t\t\t) {}\n\t\t\t\t\n\t\t\t\t[ Symbol.toPrimitive ]( mode: 'default' | 'number' | 'string' ) {\n\t\t\t\t\treturn this.name\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_compare_deep( new User( 'Jin' ), new User( 'Jin' ) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new User( 'Jin' ), new User( 'John' ) ) )\n\t\t\t\n\t\t} ,\n\t\t\n\t})\n\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'must be false'() {\n\t\t\t$mol_assert_not( 0 )\n\t\t} ,\n\t\t\n\t\t'must be true'() {\n\t\t\t$mol_assert_ok( 1 )\n\t\t} ,\n\t\t\n\t\t'two must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'three must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'two must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'three must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'two must be alike'() {\n\t\t\t$mol_assert_like( [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'three must be alike'() {\n\t\t\t$mol_assert_like( [ 3 ] , [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t\n\texport function $mol_assert_ok( value : any ) {\n\t\tif( value ) return\n\t\t$mol_fail( new Error( `${value} ≠ true` ) )\n\t}\n\t\n\texport function $mol_assert_not( value : any ) {\n\t\tif( !value ) return\n\t\t$mol_fail( new Error( `${value} ≠ false` ) )\n\t}\n\t\n\texport function $mol_assert_fail( handler : ()=> any , ErrorRight? : any ) {\n\t\t\n\t\tconst fail = $.$mol_fail\n\t\t\n\t\ttry {\n\t\t\t$.$mol_fail = $.$mol_fail_hidden\n\t\t\t\n\t\t\thandler()\n\n\t\t} catch( error: any ) {\n\t\t\t\n\t\t\tif( !ErrorRight ) return error\n\t\t\t\n\t\t\t$.$mol_fail = fail\n\n\t\t\tif( typeof ErrorRight === 'string' ) {\n\t\t\t\t$mol_assert_equal( error.message, ErrorRight )\n\t\t\t} else {\n\t\t\t\t$mol_assert_ok( error instanceof ErrorRight )\n\t\t\t}\n\t\t\t\n\t\t\treturn error\n\n\t\t} finally {\n\t\t\t$.$mol_fail = fail\n\t\t}\n\n\t\t$mol_fail( new Error( 'Not failed' ) )\n\t}\n\t\n\texport function $mol_assert_equal< Value >( ... args : [ Value, Value, ...Value[] ] ) {\n\t\tfor( let i = 0 ; i < args.length ; ++i ) {\n\t\t\tfor( let j = 0 ; j < args.length ; ++j ) {\n\t\t\t\tif( i === j ) continue\n\t\t\t\tif( Number.isNaN( args[i] as any as number ) && Number.isNaN( args[j] as any as number ) ) continue\n\t\t\t\tif( args[i] !== args[j] ) $mol_fail( new Error( `Not equal (${i+1}:${j+1})\\n${ args[i] }\\n${ args[j] }` ) )\n\t\t\t}\n\t\t}\n\t}\n\t\n\texport function $mol_assert_unique( ... args : [ any, any, ...any[] ] ) {\n\t\tfor( let i = 0 ; i < args.length ; ++i ) {\n\t\t\tfor( let j = 0 ; j < args.length ; ++j ) {\n\t\t\t\tif( i === j ) continue\n\t\t\t\tif( args[i] === args[j] || ( Number.isNaN( args[i] as any as number ) && Number.isNaN( args[j] as any as number ) ) ) {\n\t\t\t\t\t$mol_fail( new Error( `args[${ i }] = args[${ j }] = ${ args[i] }` ) )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\texport function $mol_assert_like< Value >( head : Value, ... tail : Value[]) {\n\t\tfor( let [ index, value ] of Object.entries( tail ) ) {\n\n\t\t\tif( !$mol_compare_deep( value , head ) ) {\n\n\t\t\t\tconst print = ( val : any ) => {\n\t\t\t\t\t\n\t\t\t\t\tif( !val ) return val\n\t\t\t\t\tif( typeof val !== 'object' ) return val\n\t\t\t\t\tif( 'outerHTML' in val ) return val.outerHTML\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn JSON.stringify( val )\n\t\t\t\t\t} catch( error: any ) {\n\t\t\t\t\t\tconsole.error( error )\n\t\t\t\t\t\treturn val\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn $mol_fail( new Error( `Not like (1:${ + index + 2 })\\n${ print( head ) }\\n---\\n${ print( value ) }` ) )\n\n\t\t\t}\n\n\t\t}\n\t}\n\t\n\texport function $mol_assert_dom( left: Element, right: Element ) {\n\t\t$mol_assert_equal( $mol_dom_serialize( left ), $mol_dom_serialize( right ) )\n\t}\n\n}\n",null,"namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_log3_come = ()=> {}\n\t\t$.$mol_log3_done = ()=> {}\n\t\t$.$mol_log3_fail = ()=> {}\n\t\t$.$mol_log3_warn = ()=> {}\n\t\t$.$mol_log3_rise = ()=> {}\n\t\t$.$mol_log3_area = ()=> ()=> {}\n\t} )\n\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'FQN of anon function'($) {\n\t\t\tconst $$ = Object.assign( $ , { $mol_func_name_test : ( ()=> ()=> {} )() } )\n\t\t\t$mol_assert_equal( $$.$mol_func_name_test.name , '' )\n\t\t\t$mol_assert_equal( $$.$mol_func_name( $$.$mol_func_name_test ) , '$mol_func_name_test' )\n\t\t\t$mol_assert_equal( $$.$mol_func_name_test.name , '$mol_func_name_test' )\n\t\t},\n\n\t})\n\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'get'() {\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> ({ foo : 777 }) )\n\t\t\t$mol_assert_equal( proxy.foo , 777 )\n\t\t},\n\n\t\t'has'() {\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> ({ foo : 777 }) )\n\t\t\t$mol_assert_equal( 'foo' in proxy , true )\n\t\t},\n\n\t\t'set'() {\n\t\t\tconst target = { foo : 777 }\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> target )\n\t\t\tproxy.foo = 123\n\t\t\t$mol_assert_equal( target.foo , 123 )\n\t\t},\n\t\t\n\t\t'getOwnPropertyDescriptor'() {\n\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> ({ foo : 777 }) )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tObject.getOwnPropertyDescriptor( proxy , 'foo' ),\n\t\t\t\t{\n\t\t\t\t\tvalue: 777,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'ownKeys'() {\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} as any ,\n\t\t\t\t()=> ({ foo : 777 , [ Symbol.toStringTag ] : 'bar' }),\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tReflect.ownKeys( proxy ),\n\t\t\t\t[ 'foo' , Symbol.toStringTag ],\n\t\t\t)\n\n\t\t},\n\n\t\t'getPrototypeOf'() {\n\n\t\t\tclass Foo {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} as any ,\n\t\t\t\t()=> new Foo,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tObject.getPrototypeOf( proxy ),\n\t\t\t\tFoo.prototype,\n\t\t\t)\n\n\t\t},\n\n\t\t'setPrototypeOf'() {\n\n\t\t\tclass Foo {}\n\t\t\tconst target = {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} ,\n\t\t\t\t()=> target,\n\t\t\t)\n\n\t\t\tObject.setPrototypeOf( proxy , Foo.prototype )\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tObject.getPrototypeOf( target ),\n\t\t\t\tFoo.prototype,\n\t\t\t)\n\n\t\t},\n\n\t\t'instanceof'() {\n\n\t\t\tclass Foo {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} ,\n\t\t\t\t()=> new Foo,\n\t\t\t)\n\n\t\t\t$mol_assert_ok( proxy instanceof Foo )\n\t\t\t$mol_assert_ok( proxy instanceof $mol_delegate )\n\n\t\t},\n\n\t\t'autobind'() {\n\n\t\t\tclass Foo {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} ,\n\t\t\t\t()=> new Foo,\n\t\t\t)\n\n\t\t\t$mol_assert_ok( proxy instanceof Foo )\n\t\t\t$mol_assert_ok( proxy instanceof $mol_delegate )\n\n\t\t},\n\n\t})\n}\n",null,"namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Collect deps'() {\n\t\t\t\n\t\t\tconst pub1 = new $mol_wire_pub\n\t\t\tconst pub2 = new $mol_wire_pub\n\t\t\tconst sub = new $mol_wire_pub_sub\n\t\t\t\n\t\t\tconst bu1 = sub.track_on()\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tpub1.promote()\n\t\t\t\tpub2.promote()\n\t\t\t\tpub2.promote()\n\t\t\t\t\n\t\t\t} finally {\n\t\t\t\t\n\t\t\t\tsub.track_cut()\n\t\t\t\tsub.track_off( bu1 )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpub1.emit()\n\t\t\tpub2.emit()\n\t\t\t\n\t\t\t$mol_assert_like( sub.pub_list, [ pub1, pub2, pub2 ] )\n\t\t\t\n\t\t\tconst bu2 = sub.track_on()\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tpub1.promote()\n\t\t\t\tpub1.promote()\n\t\t\t\tpub2.promote()\n\t\t\t\t\n\t\t\t} finally {\n\t\t\t\t\n\t\t\t\tsub.track_cut()\n\t\t\t\tsub.track_off( bu2 )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpub1.emit()\n\t\t\tpub2.emit()\n\t\t\t\n\t\t\t$mol_assert_like( sub.pub_list, [ pub1, pub1, pub2 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'cyclic detection'( $ ) {\n\t\t\t\n\t\t\tconst sub1 = new $mol_wire_pub_sub\n\t\t\tconst sub2 = new $mol_wire_pub_sub\n\t\t\t\n\t\t\tconst bu1 = sub1.track_on()\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tconst bu2 = sub2.track_on()\n\t\t\t\ttry {\n\t\t\t\t\t\n\t\t\t\t\t$mol_assert_fail( ()=> sub1.promote(), 'Circular subscription' )\n\t\t\t\t\t\n\t\t\t\t} finally {\n\t\t\t\t\t\n\t\t\t\t\tsub2.track_cut()\n\t\t\t\t\tsub2.track_off( bu2 )\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} finally {\n\t\t\t\t\n\t\t\t\tsub1.track_cut()\n\t\t\t\tsub1.track_off( bu1 )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t})\n}\n","namespace $ {\n\n\t/// @todo right orderinng\n\texport let $mol_after_mock_queue = [] as ( ()=> void )[]\n\n\texport function $mol_after_mock_warp() {\n\t\tconst queue = $mol_after_mock_queue.splice( 0 )\n\t\tfor( const task of queue ) task()\n\t}\n\n\texport class $mol_after_mock_commmon extends $mol_object2 {\n\n\t\tpromise = Promise.resolve()\n\t\tcancelled = false\n\t\tid : any\n\n\t\tconstructor( public task : ()=> void ) {\n\t\t\tsuper()\n\t\t\t$mol_after_mock_queue.push( task )\n\t\t}\n\n\t\tdestructor() {\n\t\t\tconst index = $mol_after_mock_queue.indexOf( this.task )\n\t\t\tif( index >= 0 )$mol_after_mock_queue.splice( index , 1 )\n\t\t}\n\n\t}\n\n\texport class $mol_after_mock_timeout extends $mol_after_mock_commmon {\n\n\t\tconstructor(\n\t\t\tpublic delay : number ,\n\t\t\ttask : ()=> void ,\n\t\t) {\n\t\t\tsuper( task )\n\t\t}\n\n\t}\n\t\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_after_frame = $mol_after_mock_commmon as any as typeof $mol_after_frame\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'Sync execution'() {\n\n\t\t\tclass Sync extends $mol_object2 {\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic calc( a: number, b: number ) {\n\t\t\t\t\treturn a + b\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( Sync.calc( 1, 2 ), 3 )\n\t\t\t\n\t\t},\n\n\t\tasync 'async <=> sync'() {\n\t\t\t\n\t\t\tclass SyncAsync extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic async val( a: number ) {\n\t\t\t\t\treturn a\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic sum( a: number, b: number ) {\n\t\t\t\t\tconst syn = $mol_wire_sync( this )\n\t\t\t\t\treturn syn.val( a ) + syn.val( b )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic async calc( a: number, b: number ) {\n\t\t\t\t\treturn 5 + await $mol_wire_async( this ).sum( a, b )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( await SyncAsync.calc( 1, 2 ), 8 )\n\n\t\t},\n\n\t\tasync 'Idempotence control'() {\n\n\t\t\tclass Idempotence extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic logs_idemp = 0\n\t\t\t\tstatic logs_unidemp = 0\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic log_idemp() {\n\t\t\t\t\tthis.logs_idemp += 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic log_unidemp() {\n\t\t\t\t\tthis.logs_unidemp += 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic async val( a: number ) {\n\t\t\t\t\treturn a\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic sum( a: number, b: number ) {\n\t\t\t\t\tthis.log_idemp()\n\t\t\t\t\tthis.log_unidemp()\n\t\t\t\t\tconst syn = $mol_wire_sync( this )\n\t\t\t\t\treturn syn.val( a ) + syn.val( b )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic async calc( a: number, b: number ) {\n\t\t\t\t\treturn 5 + await $mol_wire_async( this ).sum( a, b )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( await Idempotence.calc( 1, 2 ), 8 )\n\t\t\t$mol_assert_equal( Idempotence.logs_idemp, 1 )\n\t\t\t$mol_assert_equal( Idempotence.logs_unidemp, 3 )\n\n\t\t},\n\n\t\tasync 'Error handling'() {\n\t\t\t\n\t\t\tclass Handle extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic async sum( a: number, b: number ){\n\t\t\t\t\t$mol_fail( new Error( 'test error ' + ( a + b ) ) )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic check() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn $mol_wire_sync( Handle ).sum( 1, 2 )\n\t\t\t\t\t} catch( error: any ) {\n\t\t\t\t\t\tif( error instanceof Promise ) $mol_fail_hidden( error )\n\t\t\t\t\t\t$mol_assert_equal( error.message, 'test error 3' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t\tawait $mol_wire_async( Handle ).check()\n\t\t\t\n\t\t},\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\n\texport function $mol_promise< Result = void >() {\n\t\t\n\t\tlet done!: ( res: Result | PromiseLike< Result > )=> void\n\t\tlet fail!: ( error?: any ) => void\n\t\t\n\t\tconst promise = new Promise< Result >( ( d, f ) => {\n\t\t\tdone = d\n\t\t\tfail = f\n\t\t} )\n\t\t\n\t\treturn Object.assign( promise, {\n\t\t\tdone,\n\t\t\tfail,\n\t\t} )\n\t\t\n\t}\n\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_after_timeout = $mol_after_mock_timeout as any as typeof $mol_after_timeout\n\t})\n\n}\n","namespace $ {\n\n\texport class $mol_after_timeout extends $mol_object2 {\n\n\t\tid : any\n\n\t\tconstructor(\n\t\t\tpublic delay : number ,\n\t\t\tpublic task : ()=> void ,\n\t\t) {\n\t\t\tsuper()\n\t\t\tthis.id = setTimeout( task , delay )\n\t\t}\n\n\t\tdestructor() {\n\t\t\tclearTimeout( this.id )\n\t\t}\n\n\t}\n\t\n}\n","namespace $ {\n\t\n\texport function $mol_wait_timeout_async( this: $, timeout: number ) {\n\t\tconst promise = $mol_promise()\n\t\tconst task = new this.$mol_after_timeout( timeout , ()=> promise.done() )\n\t\treturn Object.assign( promise, {\n\t\t\tdestructor: ()=> task.destructor()\n\t\t} )\n\t}\n\t\n\texport function $mol_wait_timeout( this: $, timeout: number ) {\n\t\treturn this.$mol_wire_sync( this ).$mol_wait_timeout_async( timeout )\n\t}\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\tasync 'Latest method calls wins'( $ ) {\n\t\t\t\n\t\t\tclass NameLogger extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\tstatic first = [] as string[]\n\t\t\t\tstatic last = [] as string[]\n\t\t\t\t\n\t\t\t\tstatic send( next: string ) {\n\t\t\t\t\t$mol_wire_sync( this.first ).push( next )\n\t\t\t\t\tthis.$.$mol_wait_timeout(0)\n\t\t\t\t\tthis.last.push( next )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tconst name = $mol_wire_async( NameLogger ).send\n\t\t\t\n\t\t\tname( 'john' )\n\t\t\tconst promise = name( 'jin' )\n\t\t\t\n\t\t\t$.$mol_after_mock_warp()\n\t\t\tawait promise\n\t\t\t\n\t\t\t$mol_assert_like( NameLogger.first, [ 'john', 'jin' ] )\n\t\t\t$mol_assert_like( NameLogger.last, [ 'jin' ] )\n\n\t\t},\n\n\t\tasync 'Latest function calls wins'( $ ) {\n\t\t\t\n\t\t\tconst first = [] as string[]\n\t\t\tconst last = [] as string[]\n\t\t\t\n\t\t\tfunction send_name( next: string ) {\n\t\t\t\t$mol_wire_sync( first ).push( next )\n\t\t\t\t$.$mol_wait_timeout(0)\n\t\t\t\tlast.push( next )\n\t\t\t}\n\t\t\t\n\t\t\tconst name = $mol_wire_async( send_name )\n\t\t\t\n\t\t\tname( 'john' )\n\t\t\tconst promise = name( 'jin' )\n\t\t\t\n\t\t\t$.$mol_after_mock_warp()\n\t\t\tawait promise\n\t\t\t\n\t\t\t$mol_assert_like( first, [ 'john', 'jin' ] )\n\t\t\t$mol_assert_like( last, [ 'jin' ] )\n\t\t\t\n\t\t},\n\n\t})\n\t\n}\n",null,"namespace $ {\n\t$mol_test({\n\t\t\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#component-states\n\t\t'Cached channel' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value( next = 1 ) {\n\t\t\t\t\treturn next + 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( App.value(), 2 )\n\n\t\t\tApp.value( 2 )\n\t\t\t$mol_assert_equal( App.value(), 3 )\n\n\t\t},\n\n\t\t'Read Pushed' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value( next = 0 ) {\n\t\t\t\t\treturn next\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( App.value( 1 ), 1 )\n\t\t\t$mol_assert_equal( App.value(), 1 )\n\n\t\t},\n\n\t\t'Mem overrides mem' ($) {\n\n\t\t\tclass Base extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value( next = 1 ) {\n\t\t\t\t\treturn next + 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tclass Middle extends Base {\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value( next?: number ) {\n\t\t\t\t\treturn super.value( next ) + 1\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t\tclass App extends Middle {\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value( next?: number ) {\n\t\t\t\t\treturn super.value( next ) * 3\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( App.value(), 9 )\n\t\t\t\n\t\t\t$mol_assert_equal( App.value( 5 ), 21 )\n\t\t\t$mol_assert_equal( App.value(), 21 )\n\n\t\t},\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-consistency\n\t\t'Auto recalculation of cached values'( $ ) {\n\t\t\t\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic xxx( next? : number ) {\n\t\t\t\t\treturn next || 1\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic yyy() {\n\t\t\t\t\treturn this.xxx() + 1\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic zzz() {\n\t\t\t\t\treturn this.yyy() + 1\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( App.yyy(), 2 )\n\t\t\t$mol_assert_equal( App.zzz(), 3 )\n\n\t\t\tApp.xxx( 5 )\n\t\t\t$mol_assert_equal( App.zzz(), 7 )\n\n\t\t},\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-reasonability\n\t\t'Skip recalculation when actually no dependency changes'( $ ) {\n\t\t\t\n\t\t\tconst log = [] as string[]\n\t\t\t\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic xxx( next? : number ) {\n\t\t\t\t\tlog.push( 'xxx' )\n\t\t\t\t\treturn next || 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic yyy() {\n\t\t\t\t\tlog.push( 'yyy' )\n\t\t\t\t\treturn [ Math.sign( this.xxx() ) ]\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic zzz() {\n\t\t\t\t\tlog.push( 'zzz' )\n\t\t\t\t\treturn this.yyy()[0] + 1\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\tApp.zzz()\n\t\t\t$mol_assert_like( log, [ 'zzz', 'yyy', 'xxx' ] )\n\t\t\t\n\t\t\tApp.xxx( 5 )\n\t\t\t$mol_assert_like( log, [ 'zzz', 'yyy', 'xxx', 'xxx' ] )\n\t\t\t\n\t\t\tApp.zzz()\n\t\t\t$mol_assert_like( log, [ 'zzz', 'yyy', 'xxx', 'xxx', 'yyy' ] )\n\n\t\t},\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#flow-auto\n\t\t'Flow: Auto'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic first( next = 1 ) { return next }\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic second( next = 2 ) { return next }\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic condition( next = true ) { return next }\n\t\t\t\t\n\t\t\t\tstatic counter = 0\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic result() {\n\t\t\t\t\tconst res = this.condition() ? this.first() : this.second() \n\t\t\t\t\treturn res + this.counter ++\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result() , 1 )\n\t\t\t$mol_assert_equal( App.counter , 1 )\n\t\t\t\n\t\t\tApp.condition( false )\n\t\t\t$mol_assert_equal( App.result() , 3 )\n\t\t\t$mol_assert_equal( App.counter , 2 )\n\n\t\t\tApp.first( 10 )\n\t\t\t$mol_assert_equal( App.result() , 3 )\n\t\t\t$mol_assert_equal( App.counter , 2 )\n\n\t\t} ,\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#dupes-equality\n\t\t'Dupes: Equality'( $ ) {\n\t\t\t\n\t\t\tlet counter = 0\n\t\t\t\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic foo( next? : { numbs: number[] } ) {\n\t\t\t\t\treturn next ?? { numbs: [ 1 ] }\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic bar() {\n\t\t\t\t\treturn { ... this.foo(), count: ++ counter }\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like( App.bar(), { numbs: [ 1 ], count: 1 } )\n\n\t\t\tApp.foo({ numbs: [ 1 ] })\n\t\t\t$mol_assert_like( App.bar(), { numbs: [ 1 ], count: 1 } )\n\t\t\t\n\t\t\tApp.foo({ numbs: [ 2 ] })\n\t\t\t$mol_assert_like( App.bar(), { numbs: [ 2 ], count: 2 } )\n\n\t\t},\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#cycle-fail\n\t\t'Cycle: Fail'( $ ) {\n\t\t\n\t\t\tclass App extends $mol_object2 {\n\t\t\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic foo() : number {\n\t\t\t\t\treturn this.bar() + 1\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic bar() : number {\n\t\t\t\t\treturn this.foo() + 1\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t\t$mol_assert_fail( ()=> App.foo(), 'Circular subscription' )\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tApp.test()\n\t\t} ,\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-stability\n\t\t// 'Update deps on push'( $ ) {\n\t\t\n\t\t// \tclass App extends $mol_object2 {\n\t\t\n\t\t// \t\tstatic $ = $\n\t\t\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic left( next = false ) {\n\t\t// \t\t\treturn next\n\t\t// \t\t}\n\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic right( next = false ) {\n\t\t// \t\t\treturn next\n\t\t// \t\t}\n\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic res( next?: boolean ) {\n\t\t// \t\t\treturn this.left( next ) && this.right()\n\t\t// \t\t}\n\t\t\n\t\t// \t}\n\t\t\t\n\t\t// \t$mol_assert_equal( App.res(), false )\n\t\t// \t$mol_assert_equal( App.res( true ), false )\n\t\t\t\n\t\t// \t$mol_assert_equal( App.right( true ), true )\n\t\t// \t$mol_assert_equal( App.res(), true )\n\t\t\t\n\t\t// } ,\n\t\t\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-stability\n\t\t'Different order of pull and push'( $ ) {\n\t\t\n\t\t\tclass App extends $mol_object2 {\n\t\t\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic store( next = 0 ) {\n\t\t\t\t\treturn next\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic fast( next?: number ) {\n\t\t\t\t\treturn this.store( next )\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic slow( next?: number ) {\n\t\t\t\t\tif( next !== undefined ) this.slow() // enforce pull before push\n\t\t\t\t\treturn this.store( next )\n\t\t\t\t}\n\t\t\n\t\t\t}\n\t\t\t\n\t\t\tApp.fast()\n\t\t\t$mol_assert_equal( App.slow( 666 ), 666 )\n\t\t\t$mol_assert_equal( App.fast(), App.slow(), 666 )\n\t\t\t\n\t\t\tApp.store( 777 )\n\t\t\t$mol_assert_equal( App.fast(), App.slow(), 777 )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-stability\n\t\t'Actions inside invariant'( $ ) {\n\t\t\n\t\t\tclass App extends $mol_object2 {\n\t\t\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic count( next = 0 ) {\n\t\t\t\t\treturn next\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic count2() {\n\t\t\t\t\treturn this.count()\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic res() {\n\t\t\t\t\tconst count = this.count2()\n\t\t\t\t\tif( !count ) this.count( count + 1 )\n\t\t\t\t\treturn count + 1\n\t\t\t\t}\n\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like( App.res(), 1 )\n\t\t\t\n\t\t\tApp.count( 5 )\n\t\t\t$mol_assert_like( App.res(), 6 )\n\n\t\t} ,\n\t\t\n\t\tasync 'Toggle with async'( $ ) {\n\t\t\n\t\t\tclass App extends $mol_object2 {\n\t\t\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic checked( next = false ) {\n\t\t\t\t\t$$.$mol_wait_timeout(0)\n\t\t\t\t\treturn next\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic toggle() {\n\t\t\t\t\tconst prev = this.checked()\n\t\t\t\t\t$mol_assert_unique( this.checked( !prev ), prev )\n\t\t\t\t\t// $mol_assert_equal( this.checked() , prev )\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic res() {\n\t\t\t\t\treturn this.checked()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t\t\n\t\t\t\t\t$mol_assert_equal( App.res(), false )\n\t\t\t\t\t\n\t\t\t\t\tApp.toggle()\n\t\t\t\t\t$mol_assert_equal( App.res(), true )\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\n\t\t\t}\n\t\t\t\n\t\t\tawait $mol_wire_async( App ).test()\n\t\t\t\n\t\t} ,\n\n\t\t// // https://github.com/nin-jin/slides/tree/master/reactivity#wish-stability\n\t\t// 'Stable order of multiple root'( $ ) {\n\t\t\n\t\t// \tclass App extends $mol_object2 {\n\t\t\n\t\t// \t\tstatic $ = $\n\t\t\t\t\n\t\t// \t\tstatic counter = 0\n\t\t\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic left_trigger( next = 0 ) {\n\t\t// \t\t\treturn next\n\t\t// \t\t}\n\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic left_root() {\n\t\t// \t\t\tthis.left_trigger()\n\t\t// \t\t\treturn ++ this.counter\n\t\t// \t\t}\n\t\t\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic right_trigger( next = 0 ) {\n\t\t// \t\t\treturn next\n\t\t// \t\t}\n\t\t\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic right_root() {\n\t\t// \t\t\tthis.right_trigger()\n\t\t// \t\t\treturn ++ this.counter\n\t\t// \t\t}\n\t\t\n\t\t// \t}\n\t\t\t\n\t\t// \t$mol_assert_equal( App.left_root(), 1 )\n\t\t// \t$mol_assert_equal( App.right_root(), 2 )\n\t\t\t\n\t\t// \tApp.right_trigger( 1 )\n\t\t// \tApp.left_trigger( 1 )\n\t\t\t\n\t\t// \t$mol_wire_fiber.sync()\n\t\t\t\n\t\t// \t$mol_assert_equal( App.right_root(), 4 )\n\t\t// \t$mol_assert_equal( App.left_root(), 3 )\n\n\t\t// } ,\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#error-store\n\t\t'Restore after error'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic condition( next = false ) { return next }\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic broken() {\n\t\t\t\t\t\n\t\t\t\t\tif( this.condition() ) {\n\t\t\t\t\t\t$mol_fail( new Error( 'test error' ) )\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic result() {\n\t\t\t\t\treturn this.broken()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result() , 1 )\n\t\t\t\n\t\t\tApp.condition( true )\n\t\t\t$mol_assert_fail( ()=> App.result() )\n\t\t\t\n\t\t\tApp.condition( false )\n\t\t\t$mol_assert_equal( App.result() , 1 )\n\n\t\t} ,\n\t\n\t\tasync 'Wait for data'($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\tstatic async source() {\n\t\t\t\t\treturn 'Jin'\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic middle() {\n\t\t\t\t\treturn $mol_wire_sync( this ).source()\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic target() {\n\t\t\t\t\treturn this.middle()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t\t$mol_assert_equal( App.target() , 'Jin' )\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tawait $mol_wire_async( App ).test()\n\t\t},\n\n\t\t'Auto destroy on long alone'( $ ) {\n\n\t\t\tlet destroyed = false\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic showing( next = true ) {\n\t\t\t\t\treturn next\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic details() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdestructor() {\n\t\t\t\t\t\t\tdestroyed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic render() {\n\t\t\t\t\treturn this.showing() ? this.details() : null\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst details = App.render()\n\t\t\t$mol_assert_ok( details )\n\n\t\t\tApp.showing( false )\n\t\t\t$mol_assert_not( App.render() )\n\t\t\t\n\t\t\tApp.showing( true )\n\t\t\t$mol_assert_equal( App.render() , details )\n\t\t\t\n\t\t\t$mol_wire_fiber.sync()\n\t\t\t$mol_assert_not( destroyed )\n\t\t\t\n\t\t\tApp.showing( false )\n\t\t\t$mol_wire_fiber.sync()\n\t\t\t$mol_assert_ok( destroyed )\n\n\t\t\tApp.showing( true )\n\t\t\t$mol_assert_unique( App.render() , details )\n\t\t\t\n\t\t},\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-stability\n\t\tasync 'Hold pubs while wait async task'($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\tstatic counter = 0\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic resets( next?: null ): number {\n\t\t\t\t\treturn ( $mol_wire_probe( ()=> this.resets() ) ?? -1 ) + 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic async wait() { }\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value() {\n\t\t\t\t\treturn ++ this.counter\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic result() {\n\t\t\t\t\tif( this.resets() ) $mol_wire_sync( this ).wait()\n\t\t\t\t\treturn this.value()\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( App.result() , 1 )\n\t\t\t\n\t\t\tApp.resets( null )\n\t\t\t$mol_wire_fiber.sync()\n\t\t\t$mol_assert_equal( await $mol_wire_async( App ).result() , 1 )\n\t\t\t\n\t\t},\n\n\t\t'Owned value has js-path name' () {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic title() {\n\t\t\t\t\treturn new $mol_object2\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( `${ App.title() }` , 'App.title()' )\n\n\t\t} ,\n\n\t\t'Unsubscribe from temp pubs on complete' ($) {\n\n\t\t\tclass Random extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic seed() {\n\t\t\t\t\treturn Math.random()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic resets( next?: null ) {\n\t\t\t\t\treturn Math.random()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value() {\n\t\t\t\t\tthis.resets()\n\t\t\t\t\treturn this.seed()\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\tconst first = Random.value()\n\t\t\t\n\t\t\tRandom.resets( null )\n\t\t\t$mol_assert_unique( Random.value(), first )\n\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Memoize by single simple key' ($) {\n\n\t\t\tclass Team extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic user_name( user: string , next?: string ) {\n\t\t\t\t\treturn next ?? user\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic user_names() {\n\t\t\t\t\treturn [\n\t\t\t\t\t\tthis.user_name( 'jin' ),\n\t\t\t\t\t\tthis.user_name( 'john' ),\n\t\t\t\t\t]\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like( Team.user_names(), [ 'jin', 'john' ] )\n\t\t\t\n\t\t\tTeam.user_name( 'jin', 'JIN' )\n\t\t\t$mol_assert_like( Team.user_names(), [ 'JIN', 'john' ] )\n\n\t\t} ,\n\n\t\t'Memoize by single complex key' ($) {\n\n\t\t\tclass Map extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic tile( pos: [ number, number ] ) {\n\t\t\t\t\treturn new String( `/tile=${pos}` )\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t\t\n\t\t\t\t\t$mol_assert_like( this.tile([0,1]), new String( '/tile=0,1' ) )\n\t\t\t\t\t$mol_assert_equal( this.tile([0,1]), this.tile([0,1]) )\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\tMap.test()\n\t\t} ,\n\n\t\t'Owned value has js-path name' () {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic like( friend: number ) {\n\t\t\t\t\treturn new $mol_object2\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic relation( [ friend, props ]: [ number, [ number ] ] ) {\n\t\t\t\t\treturn new $mol_object2\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( `${ App.like(123) }` , 'App.like(123)' )\n\t\t\t$mol_assert_equal( `${ App.relation([123,[456]]) }` , 'App.relation([123,[456]])' )\n\n\t\t} ,\n\n\t\t'Deep deps' ($) {\n\n\t\t\tclass Fib extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\tstatic sums = 0\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic value( index: number , next?: number ): number {\n\t\t\t\t\tif( next ) return next\n\t\t\t\t\tif( index < 2 ) return 1\n\t\t\t\t\t++ this.sums\n\t\t\t\t\treturn this.value( index - 1 ) + this.value( index - 2 )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( Fib.value( 4 ), 5 )\n\t\t\t$mol_assert_equal( Fib.sums, 3 )\n\t\t\t\n\t\t\tFib.value( 1, 2 )\n\t\t\t$mol_assert_equal( Fib.value( 4 ), 8 )\n\t\t\t$mol_assert_equal( Fib.sums, 6 )\n\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Previous value'() {\n\n\t\t\tclass Cache extends $mol_object2 {\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic store( next?: Record< string, number > ): typeof next {\n\t\t\t\t\tif( !next ) return {}\n\t\t\t\t\treturn {\n\t\t\t\t\t\t... $mol_wire_probe( ()=> this.store() ) ?? {},\n\t\t\t\t\t\t... next,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like( Cache.store(), {} )\n\t\t\t\n\t\t\t$mol_assert_like( Cache.store({ foo: 666 }), { foo: 666 } )\n\t\t\t$mol_assert_like( Cache.store({ bar: 777 }), { foo: 666, bar: 777 } )\n\n\t\t} ,\n\t\t\n\t})\n}\n","namespace $ {\n\t\n\texport function $mol_wire_probe< Value >(\n\t\ttask : ()=> Value, next?: Value\n\t) : Value | undefined {\n\t\t\n\t\tconst warm = $mol_wire_fiber.warm\n\t\t\n\t\ttry {\n\t\t\t$mol_wire_fiber.warm = false\n\t\t\treturn task()\n\t\t} finally {\n\t\t\t$mol_wire_fiber.warm = warm\n\t\t}\n\t\t\n\t}\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'init with overload'() {\n\t\t\tclass X extends $mol_object {\n\t\t\t\tfoo() {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = X.make({\n\t\t\t\tfoo : ()=> 2 ,\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( x.foo() , 2 )\n\t\t} ,\n\t\t\t\n\t} )\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( context => {\n\t\tclass $mol_state_local_mock< Value > extends $mol_state_local< Value > {\n\n\t\t\tstatic state = {} as Record< string , any >\n\t\t\t\t\t\t\n\t\t\t@ $mol_mem_key\n\t\t\tstatic value< Value >(\n\t\t\t\tkey : string ,\n\t\t\t\tnext = this.state[ key ] as Value ,\n\t\t\t) {\n\t\t\t\treturn this.state[ key ] = ( next || null )\n\t\t\t}\n\n\t\t}\n\t\tcontext.$mol_state_local = $mol_state_local_mock\n\t} )\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'local get set delete'() {\n\t\t\t\t\t\n\t\t\tvar key = '$mol_state_local_test:' + Math.random()\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , null )\n\t\t\t\n\t\t\t$mol_state_local.value( key , 123 )\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , 123 )\n\t\t\t\n\t\t\t$mol_state_local.value( key , null )\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , null )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t$mol_test({\n\t\t'encode utf8 string'() {\n\t\t\tconst str = 'Hello, ΧΨΩЫ'\n\t\t\tconst encoded = new Uint8Array( [ 72, 101, 108, 108, 111, 44, 32, 206, 167, 206, 168, 206, 169, 208, 171 ] )\n\n\t\t\t$mol_assert_like( $mol_charset_encode(str), encoded )\n\t\t},\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\tasync 'sizes'() {\n\t\t\t\n\t\t\tconst pair = await $$.$mol_crypto_auditor_pair()\n\t\t\t\n\t\t\tconst key_public = await pair.public.serial()\n\t\t\t$mol_assert_equal( key_public.length, $mol_crypto_auditor_public.size )\n\t\t\t\n\t\t\tconst key_private = await pair.private.serial()\n\t\t\t$mol_assert_equal( key_private.length, $mol_crypto_auditor_private.size )\n\t\t\t\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\tconst sign = await pair.private.sign( data )\n\t\t\t$mol_assert_equal( sign.byteLength, $mol_crypto_auditor_sign_size )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'verify self signed with auto generated key'() {\n\t\t\t\n\t\t\tconst auditor = await $$.$mol_crypto_auditor_pair()\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\tconst sign = await auditor.private.sign( data )\n\t\t\t\n\t\t\t$mol_assert_ok( await auditor.public.verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'verify signed with exported auto generated key'() {\n\t\t\t\n\t\t\tconst pair = await $$.$mol_crypto_auditor_pair()\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\t\n\t\t\tconst Alice = await $mol_crypto_auditor_private.from( await pair.private.serial() )\n\t\t\tconst sign = await Alice.sign( data )\n\t\t\t\n\t\t\tconst Bob = await $mol_crypto_auditor_public.from( await pair.public.serial() )\n\t\t\t$mol_assert_ok( await Bob.verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'take public key from private'() {\n\t\t\t\n\t\t\tconst pair = await $$.$mol_crypto_auditor_pair()\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\t\n\t\t\tconst Alice = pair.private\n\t\t\tconst sign = await Alice.sign( data )\n\t\t\t\n\t\t\tconst Bob = await pair.private.public()\n\t\t\tconst Carol = await $mol_crypto_auditor_public.from( await pair.private.serial() )\n\t\t\t\n\t\t\t$mol_assert_ok( await Bob.verify( data, sign ) )\n\t\t\t$mol_assert_ok( await Carol.verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","/** @jsx $mol_jsx */\n/** @jsxFrag $mol_jsx_frag */\nnamespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'same list'() {\n\t\t\t\n\t\t\tconst list = <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">b</p>\n\t\t\t\t<p data-rev=\"old\">c</p>\n\t\t\t</body>\n\t\t\t\n\t\t\t$mol_reconcile({\n\t\t\t\tprev: [ ... list.children ],\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 3,\n\t\t\t\tnext: 'abc',\n\t\t\t\tequal: ( next, prev )=> prev.textContent === next,\n\t\t\t\tdrop: ( prev, lead )=> list.removeChild( prev ),\n\t\t\t\tinsert: ( next, lead )=> list.insertBefore( <p data-rev=\"new\">{ next }</p>, lead ? lead.nextSibling : list.firstChild ),\n\t\t\t\tupdate: ( next, prev, lead )=> {\n\t\t\t\t\tprev.textContent = next\n\t\t\t\t\tprev.setAttribute( 'data-rev', 'up' )\n\t\t\t\t\treturn prev\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_dom( list, <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">b</p>\n\t\t\t\t<p data-rev=\"old\">c</p>\n\t\t\t</body> )\n\t\t\t\n\t\t},\n\t\t\n\t\t'insert items'() {\n\t\t\t\n\t\t\tconst list = <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">b</p>\n\t\t\t\t<p data-rev=\"old\">c</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body>\n\t\t\t\n\t\t\t$mol_reconcile({\n\t\t\t\tprev: [ ... list.children ],\n\t\t\t\tfrom: 1,\n\t\t\t\tto: 3,\n\t\t\t\tnext: 'bXYc',\n\t\t\t\tequal: ( next, prev )=> prev.textContent === next,\n\t\t\t\tdrop: ( prev, lead )=> list.removeChild( prev ),\n\t\t\t\tinsert: ( next, lead )=> list.insertBefore( <p data-rev=\"new\">{ next }</p>, lead ? lead.nextSibling : list.firstChild ),\n\t\t\t\tupdate: ( next, prev, lead )=> {\n\t\t\t\t\tprev.textContent = next\n\t\t\t\t\tprev.setAttribute( 'data-rev', 'up' )\n\t\t\t\t\treturn prev\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_dom( list, <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">b</p>\n\t\t\t\t<p data-rev=\"new\">X</p>\n\t\t\t\t<p data-rev=\"new\">Y</p>\n\t\t\t\t<p data-rev=\"old\">c</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body> )\n\t\t\t\n\t\t},\n\t\t\n\t\t'split item'() {\n\t\t\t\n\t\t\tconst list = <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">bc</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body>\n\t\t\t\n\t\t\t$mol_reconcile({\n\t\t\t\tprev: [ ... list.children ],\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 3,\n\t\t\t\tnext: 'abcd',\n\t\t\t\tequal: ( next, prev )=> prev.textContent === next,\n\t\t\t\tdrop: ( prev, lead )=> list.removeChild( prev ),\n\t\t\t\tinsert: ( next, lead )=> list.insertBefore( <p data-rev=\"new\">{ next }</p>, lead ? lead.nextSibling : list.firstChild ),\n\t\t\t\tupdate: ( next, prev, lead )=> {\n\t\t\t\t\tprev.textContent = next\n\t\t\t\t\tprev.setAttribute( 'data-rev', 'up' )\n\t\t\t\t\treturn prev\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_dom( list, <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"new\">b</p>\n\t\t\t\t<p data-rev=\"up\">c</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body> )\n\t\t\t\n\t\t},\n\t\t\n\t\t'drop items'() {\n\t\t\t\n\t\t\tconst list = <body>\n\t\t\t\t<p data-rev=\"old\">A</p>\n\t\t\t\t<p data-rev=\"old\">B</p>\n\t\t\t\t<p data-rev=\"old\">x</p>\n\t\t\t\t<p data-rev=\"old\">y</p>\n\t\t\t\t<p data-rev=\"old\">C</p>\n\t\t\t\t<p data-rev=\"old\">D</p>\n\t\t\t</body>\n\t\t\t\n\t\t\t$mol_reconcile({\n\t\t\t\tprev: [ ... list.children ],\n\t\t\t\tfrom: 1,\n\t\t\t\tto: 5,\n\t\t\t\tnext: 'BC',\n\t\t\t\tequal: ( next, prev )=> prev.textContent === next,\n\t\t\t\tdrop: ( prev, lead )=> list.removeChild( prev ),\n\t\t\t\tinsert: ( next, lead )=> list.insertBefore( <p data-rev=\"new\">{ next }</p>, lead ? lead.nextSibling : list.firstChild ),\n\t\t\t\tupdate: ( next, prev, lead )=> {\n\t\t\t\t\tprev.textContent = next\n\t\t\t\t\tprev.setAttribute( 'data-rev', 'up' )\n\t\t\t\t\treturn prev\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_dom( list, <body>\n\t\t\t\t<p data-rev=\"old\">A</p>\n\t\t\t\t<p data-rev=\"old\">B</p>\n\t\t\t\t<p data-rev=\"old\">C</p>\n\t\t\t\t<p data-rev=\"old\">D</p>\n\t\t\t</body> )\n\t\t\t\n\t\t},\n\t\t\n\t\t'update items'() {\n\t\t\t\n\t\t\tconst list = <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">B</p>\n\t\t\t\t<p data-rev=\"old\">C</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body>\n\t\t\t\n\t\t\t$mol_reconcile({\n\t\t\t\tprev: [ ... list.children ],\n\t\t\t\tfrom: 1,\n\t\t\t\tto: 3,\n\t\t\t\tnext: 'XY',\n\t\t\t\tequal: ( next, prev )=> prev.textContent === next,\n\t\t\t\tdrop: ( prev, lead )=> list.removeChild( prev ),\n\t\t\t\tinsert: ( next, lead )=> list.insertBefore( <p data-rev=\"new\">{ next }</p>, lead ? lead.nextSibling : list.firstChild ),\n\t\t\t\tupdate: ( next, prev, lead )=> {\n\t\t\t\t\tprev.textContent = next\n\t\t\t\t\tprev.setAttribute( 'data-rev', 'up' )\n\t\t\t\t\treturn prev\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_dom( list, <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"up\">X</p>\n\t\t\t\t<p data-rev=\"up\">Y</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body> )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'config by value'() {\n\n\t\t\tconst N = $mol_data_setup( ( a : number )=> a , 5 )\n\t\t\t\n\t\t\t$mol_assert_equal( N.config , 5 )\n\t\t\t\n\t\t\ttype record_value = $mol_type_assert<\n\t\t\t\ttypeof N.Value ,\n\t\t\t\tnumber\n\t\t\t>\n\t\t\t\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'equal paths' () {\n\n\t\t\tconst diff = $mol_diff_path( [1,2,3,4] , [1,2,3,4] , [1,2,3,4] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [1,2,3,4] , \n\t\t\t\tsuffix : [ [] , [] , [] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'different suffix' () {\n\n\t\t\tconst diff = $mol_diff_path( [1,2,3,4] , [1,2,3,5] , [1,2,5,4] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [1,2] , \n\t\t\t\tsuffix : [ [3,4] , [3,5] , [5,4] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'one contains other' () {\n\t\t\t\n\t\t\tconst diff = $mol_diff_path( [1,2,3,4] , [1,2] , [1,2,3] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [1,2] , \n\t\t\t\tsuffix : [ [3,4] , [] , [3] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'fully different' () {\n\n\t\t\tconst diff = $mol_diff_path( [1,2] , [3,4] , [5,6] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [] , \n\t\t\t\tsuffix : [ [1,2] , [3,4] , [5,6] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\n\tenum sex { male , female }\n\t\n\tenum gender {\n\t\tbisexual = 'bisexual' ,\n\t\ttrans = 'transgender' ,\n\t}\n\t\n\t// Test disabled due https://github.com/microsoft/TypeScript/issues/46112\n\t// type sex_value =  $mol_type_assert< typeof Sex.Value , sex >\n\t\n\t$mol_test({\n\t\t\n\t\t'config of enum' () {\n\t\t\t\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\n\t\t\t$mol_assert_like( Sex.config , {\n\t\t\t\tname : 'sex' ,\n\t\t\t\tdict : sex ,\n\t\t\t} )\n\t\t\t\n\t\t} ,\n\n\t\t'name of enum' () {\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\t\t\t$mol_assert_equal( Sex.config.name , 'sex' )\n\t\t} ,\n\n\t\t'Is right value of enum' () {\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\t\t\t$mol_assert_equal( Sex(0) , sex.male )\n\t\t} ,\n\n\t\t'Is wrong value of enum' () {\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\t\t\t$mol_assert_fail( ()=> Sex(2) , `2 is not value of sex enum` )\n\t\t} ,\n\n\t\t'Is name instead of value' () {\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\t\t\t$mol_assert_fail( ()=> Sex( 'male' as any ) , `male is not value of sex enum` )\n\t\t} ,\n\n\t\t'Is common object field' () {\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\t\t\t$mol_assert_fail( ()=> Sex( '__proto__' as any ) , `__proto__ is not value of sex enum` )\n\t\t} ,\n\n\t})\n\n\n\t// Test disabled due https://github.com/microsoft/TypeScript/issues/46112\n\t// type gender_value =  $mol_type_assert< typeof Gender.Value , gender >\n\n\t$mol_test({\n\t\t\n\t\t'config of enum' () {\n\n\t\t\tconst Gender = $mol_data_enum( 'gender' , gender )\n\t\t\t\n\t\t\t$mol_assert_like( Gender.config , {\n\t\t\t\tname : 'gender' ,\n\t\t\t\tdict : gender ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'Is right value of enum' () {\n\t\t\tconst Gender = $mol_data_enum( 'gender' , gender )\n\t\t\t$mol_assert_equal( Gender( 'transgender' as any ) , gender.trans )\n\t\t} ,\n\n\t\t'Is wrong value of enum' () {\n\t\t\tconst Gender = $mol_data_enum( 'gender' , gender )\n\t\t\t$mol_assert_fail( ()=> Gender( 'xxx' as any ) , `xxx is not value of gender enum` )\n\t\t} ,\n\n\t\t'Is name instead of value' () {\n\t\t\tconst Gender = $mol_data_enum( 'gender' , gender )\n\t\t\t$mol_assert_fail( ()=> Gender( 'trans' as any ) , `trans is not value of gender enum` )\n\t\t} ,\n\n\t\t'Is common object field' () {\n\t\t\tconst Gender = $mol_data_enum( 'gender' , gender )\n\t\t\t$mol_assert_fail( ()=> Gender( '__proto__' as any ) , `__proto__ is not value of gender enum` )\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\t$mol_test({\n\t\t'decode utf8 string'() {\n\t\t\tconst str = 'Hello, ΧΨΩЫ'\n\t\t\tconst encoded = new Uint8Array( [ 72, 101, 108, 108, 111, 44, 32, 206, 167, 206, 168, 206, 169, 208, 171 ] )\n\n\t\t\t$mol_assert_equal( $mol_charset_decode(encoded), str )\n\t\t\t$mol_assert_equal( $mol_charset_decode(encoded, 'utf8'), str )\n\t\t},\n\n\t\t'decode empty string'() {\n\t\t\tconst encoded = new Uint8Array( [] )\n\n\t\t\t$mol_assert_equal( $mol_charset_decode(encoded), '' )\n\t\t},\n\t})\n}\n","namespace $ {\n\t\n\tconst common = [\n\t\t\n\t\t$mol_int62_to_string({\n\t\t\tlo: 12 << 0 | 13 << 8 | 14 << 16 | 15 << 24, // land_lo\n\t\t\thi: 13 << 0 | 14 << 8 | 15 << 16 | 16 << 24, // land_hi\n\t\t}),\n\t\t$mol_int62_to_string({\n\t\t\tlo: 2  << 0 |  3 << 8 |  4 << 16 |  5 << 24, // auth_lo\n\t\t\thi: 3  << 0 |  4 << 8 |  5 << 16 |  6 << 24, // auto_hi\n\t\t}),\n\t\t\n\t\t$mol_int62_to_string({\n\t\t\tlo: 4  << 0 |  5 << 8 |  6 << 16 |  7 << 24, // head_lo\n\t\t\thi: 5  << 0 |  6 << 8 |  7 << 16 |  8 << 24, // head_hi\n\t\t}),\n\t\t$mol_int62_to_string({\n\t\t\tlo: 10 << 0 | 11 << 8 | 12 << 16 | 13 << 24, // self_lo\n\t\t\thi: 11 << 0 | 12 << 8 | 13 << 16 | 14 << 24, // self_hi\n\t\t}),\n\t\t\n\t\t$mol_int62_to_string({\n\t\t\tlo: 6  << 0 |  7 << 8 |  8 << 16 |  9 << 24, // next_lo\n\t\t\thi: 7  << 0 |  8 << 8 |  9 << 16 | 10 << 24, // next_hi\n\t\t}),\n\t\t$mol_int62_to_string({\n\t\t\tlo: 8  << 0 |  9 << 8 | 10 << 16 | 11 << 24, // prev_lo\n\t\t\thi: 9  << 0 | 10 << 8 | 11 << 16 | 12 << 24, // prev_hi\n\t\t}),\n\t\t\n\t\t1  << 0 |  2 << 8 |  3 << 16 |  4 << 24, // time\n\t\t\n\t] as const\n\t\n\t$mol_test({\n\t\t\n\t\t'pack and unpack unit with null'( $ ) {\n\t\t\t\n\t\t\tconst source = new $hyoo_crowd_unit(\n\t\t\t\t... common,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t)\n\t\t\t\n\t\t\tconst packed = $hyoo_crowd_unit_bin.from_unit( source )\n\t\t\tconst unpacked = packed.unit()\n\t\t\t\n\t\t\tsource.bin = packed\n\t\t\t$mol_assert_like( source, unpacked )\n\t\t\t\n\t\t},\n\t\t\n\t\t'pack and unpack unit with json'( $ ) {\n\t\t\t\n\t\t\tconst source = new $hyoo_crowd_unit(\n\t\t\t\t... common,\n\t\t\t\t{ a: [ 1 ] },\n\t\t\t\tnull,\n\t\t\t)\n\t\t\t\n\t\t\tconst packed = $hyoo_crowd_unit_bin.from_unit( source )\n\t\t\tconst unpacked = packed.unit()\n\t\t\t\n\t\t\tsource.bin = packed\n\t\t\t$mol_assert_like( source, unpacked )\n\t\t\t\n\t\t},\n\t\t\n\t\t'pack and unpack unit with bin'( $ ) {\n\t\t\t\n\t\t\tconst source = new $hyoo_crowd_unit(\n\t\t\t\t... common,\n\t\t\t\tnew Uint8Array([ 1, 2, 3, 4, 5, 6, 7, 8 ]),\n\t\t\t\tnull,\n\t\t\t)\n\t\t\t\n\t\t\tconst packed = $hyoo_crowd_unit_bin.from_unit( source )\n\t\t\tconst unpacked = packed.unit()\n\t\t\t\n\t\t\tsource.bin = packed\n\t\t\t$mol_assert_like( source, unpacked )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'sign / verify'( $ ) {\n\t\t\t\n\t\t\tconst source = new $hyoo_crowd_unit(\n\t\t\t\t... common,\n\t\t\t\t{ a: [ 1 ] },\n\t\t\t\tnull,\n\t\t\t)\n\t\t\t\n\t\t\tconst packed = $hyoo_crowd_unit_bin.from_unit( source )\n\t\t\t\n\t\t\tconst key = await $.$mol_crypto_auditor_pair()\n\t\t\tpacked.sign( new Uint8Array( await key.private.sign( packed.sens() ) ) )\n\t\t\t\n\t\t\tconst sign = packed.sign()\n\t\t\t\n\t\t\t$mol_assert_ok( await key.public.verify( packed.sens(), sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n",null,null,"namespace $ {\n\n\t$mol_test({\n\n\t\t'escape' () {\n\n\t\t\tconst specials = $mol_regexp.from( '.*+?^${}()|[]\\\\' )\n\t\t\t$mol_assert_equal( specials.source , '\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\' )\n\n\t\t},\n\n\t\t'char code' () {\n\n\t\t\tconst space = $mol_regexp.from( 32 )\n\t\t\t$mol_assert_like( ' '.match( space ) , [ ' ' ] )\n\n\t\t},\n\n\t\t'repeat fixed'() {\n\n\t\t\tconst { repeat , decimal_only: digit } = $mol_regexp\n\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\t$mol_assert_like( '#2020#'.match( year ) , [ '2020' ] )\n\n\t\t},\n\n\t\t'greedy repeat'() {\n\n\t\t\tconst { repeat , repeat_greedy , latin_only: letter } = $mol_regexp\n\n\t\t\t$mol_assert_like( 'abc'.match( repeat( letter, 1, 2 ) ) , [ 'a', 'b', 'c' ] )\n\t\t\t$mol_assert_like( 'abc'.match( repeat_greedy( letter, 1, 2 ) ) , [ 'ab', 'c' ] )\n\n\t\t},\n\n\t\t'repeat range'() {\n\n\t\t\tconst { repeat_greedy , decimal_only: digit } = $mol_regexp\n\n\t\t\tconst year = repeat_greedy( digit , 2 , 4 )\n\t\t\t\n\t\t\t$mol_assert_like( '#2#'.match( year ) , null )\n\t\t\t$mol_assert_like( '#20#'.match( year ) , [ '20' ] )\n\t\t\t$mol_assert_like( '#2020#'.match( year ) , [ '2020' ] )\n\t\t\t$mol_assert_like( '#20201#'.match( year ) , [ '2020' ] )\n\n\t\t},\n\n\t\t'repeat from'() {\n\n\t\t\tconst { repeat_greedy , latin_only: letter } = $mol_regexp\n\n\t\t\tconst name = repeat_greedy( letter , 2 )\n\n\t\t\t$mol_assert_like( '##'.match( name ) , null )\n\t\t\t$mol_assert_like( '#a#'.match( name ) , null )\n\t\t\t$mol_assert_like( '#ab#'.match( name ) , [ 'ab' ] )\n\t\t\t$mol_assert_like( '#abc#'.match( name ) , [ 'abc' ] )\n\n\t\t},\n\n\t\t'from string'() {\n\n\t\t\tconst regexp = $mol_regexp.from( '[\\\\d]' )\n\t\t\t\n\t\t\t$mol_assert_equal( regexp.source , '\\\\[\\\\\\\\d\\\\]' )\n\t\t\t$mol_assert_equal( regexp.flags , 'gsu' )\n\n\t\t},\n\n\t\t'from regexp'() {\n\t\t\t\n\t\t\tconst regexp = $mol_regexp.from( /[\\d]/i )\n\t\t\t\n\t\t\t$mol_assert_equal( regexp.source , '[\\\\d]' )\n\t\t\t$mol_assert_equal( regexp.flags , 'i' )\n\n\t\t},\n\n\t\t'split'() {\n\t\t\t\n\t\t\tconst regexp = $mol_regexp.from( ';' )\n\t\t\t\n\t\t\t$mol_assert_like( 'aaa;bbb;ccc'.split( regexp ) , [ 'aaa', ';', 'bbb', ';', 'ccc' ] )\n\t\t\t$mol_assert_like( 'aaa;;ccc'.split( regexp ) , [ 'aaa', ';', '', ';', 'ccc' ] )\n\t\t\t$mol_assert_like( 'aaa'.split( regexp ) , [ 'aaa' ] )\n\t\t\t$mol_assert_like( ''.split( regexp ) , [''] )\n\n\t\t},\n\n\t\t'test for matching'() {\n\t\t\t\n\t\t\tconst regexp = $mol_regexp.from( 'foo' )\n\t\t\t\n\t\t\t$mol_assert_like( regexp.test( '' ) , false )\n\t\t\t$mol_assert_like( regexp.test( 'fo' ) , false )\n\t\t\t$mol_assert_like( regexp.test( 'foo' ) , true )\n\t\t\t$mol_assert_like( regexp.test( 'foobar' ) , true )\n\t\t\t$mol_assert_like( regexp.test( 'barfoo' ) , true )\n\n\t\t},\n\n\t\t'case ignoring'() {\n\n\t\t\tconst xxx = $mol_regexp.from( 'x' , { ignoreCase : true } )\n\n\t\t\t$mol_assert_like( xxx.flags , 'gisu' )\n\t\t\t$mol_assert_like( xxx.exec( 'xx' )![0] , 'x' )\n\t\t\t$mol_assert_like( xxx.exec( 'XX' )![0] , 'X' )\n\n\t\t},\n\n\t\t'multiline mode'() {\n\n\t\t\tconst { end , from } = $mol_regexp\n\n\t\t\tconst xxx = from( [ 'x' , end ] , { multiline : true } )\n\n\t\t\t$mol_assert_like( xxx.exec( 'x\\ny' )![0] , 'x' )\n\t\t\t$mol_assert_like( xxx.flags , 'gmsu' )\n\n\t\t},\n\n\t\t'flags override'() {\n\n\t\t\tconst triplet = $mol_regexp.from(\n\t\t\t\t$mol_regexp.from(\n\t\t\t\t\t/.../,\n\t\t\t\t\t{ ignoreCase: true },\n\t\t\t\t),\n\t\t\t\t{ multiline: true },\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like( triplet.toString() , '/.../gmsu' )\n\n\t\t},\n\n\t\t'sequence'() {\n\n\t\t\tconst { begin , end , decimal_only: digit , repeat , from } = $mol_regexp\n\t\t\t\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\tconst dash = '-'\n\t\t\tconst month = repeat( digit , 2 , 2 )\n\t\t\tconst day = repeat( digit , 2 , 2 )\n\n\t\t\tconst date = from([ begin , year , dash , month , dash , day , end ])\n\n\t\t\t$mol_assert_like( date.exec( '2020-01-02' )![0] , '2020-01-02' )\n\n\t\t},\n\n\t\t'optional'() {\n\n\t\t\tconst name = $mol_regexp.from([ 'A', ['4'] ])\n\n\t\t\t$mol_assert_equal( 'AB'.match( name )![0] , 'A' )\n\t\t\t$mol_assert_equal( 'A4'.match( name )![0] , 'A4' )\n\n\t\t},\n\n\t\t'anon variants'() {\n\n\t\t\tconst name = $mol_regexp.from([ 'A', $mol_regexp.vary([ '4', '5' ]) ])\n\n\t\t\t$mol_assert_equal( 'AB'.match( name ) , null )\n\t\t\t$mol_assert_equal( 'A4'.match( name )![0] , 'A4' )\n\t\t\t$mol_assert_equal( 'A5'.match( name )![0] , 'A5' )\n\n\t\t},\n\n\t\t'only groups'() {\n\n\t\t\tconst regexp = $mol_regexp.from({ dog : '@' })\n\n\t\t\t$mol_assert_like( [ ... '#'.matchAll( regexp ) ][0].groups , undefined )\n\t\t\t$mol_assert_like( [ ... '@'.matchAll( regexp ) ][0].groups , { dog : '@' } )\n\n\t\t},\n\n\t\t'catch skipped'() {\n\n\t\t\tconst regexp = $mol_regexp.from(/(@)(\\d?)/g)\n\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... '[[@]]'.matchAll( regexp ) ].map( f => [ ... f ] ) ,\n\t\t\t\t[\n\t\t\t\t\t[ '[[' ],\n\t\t\t\t\t[ '@', '@' , '' ],\n\t\t\t\t\t[ ']]' ],\n\t\t\t\t]\n\t\t\t)\n\n\t\t},\n\n\t\t'enum variants'() {\n\n\t\t\tenum Sex {\n\t\t\t\tmale = 'male',\n\t\t\t\tfemale = 'female',\n\t\t\t}\n\n\t\t\tconst sexism = $mol_regexp.from( Sex )\n\n\t\t\t$mol_assert_like( [ ... ''.matchAll( sexism ) ].length, 0 )\n\t\t\t$mol_assert_like( [ ... 'trans'.matchAll( sexism ) ][0].groups, undefined )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... 'male'.matchAll( sexism ) ][0].groups,\n\t\t\t\t{ male : 'male' , female : '' },\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... 'female'.matchAll( sexism ) ][0].groups,\n\t\t\t\t{ male : '' , female : 'female' },\n\t\t\t)\n\n\t\t},\n\n\t\t'recursive only groups'() {\n\n\t\t\tenum Sex {\n\t\t\t\tmale = 'male',\n\t\t\t\tfemale = 'female',\n\t\t\t}\n\n\t\t\tconst sexism = $mol_regexp.from({ Sex })\n\n\t\t\t$mol_assert_like( [ ... ''.matchAll( sexism ) ].length , 0 )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... 'male'.matchAll( sexism ) ][0].groups,\n\t\t\t\t{ Sex : 'male' , male : 'male' , female : '' },\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... 'female'.matchAll( sexism ) ][0].groups,\n\t\t\t\t{ Sex : 'female' , male : '' , female : 'female' },\n\t\t\t)\n\n\t\t},\n\n\t\t'sequence with groups'() {\n\n\t\t\tconst { begin , end , decimal_only: digit , repeat , from } = $mol_regexp\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\tconst dash = '-'\n\t\t\tconst month = repeat( digit , 2 , 2 )\n\t\t\tconst day = repeat( digit , 2 , 2 )\n\n\t\t\tconst regexp = from([ begin , {year} , dash , {month} , dash , {day} , end ])\n\t\t\tconst found = [ ... '2020-01-02'.matchAll( regexp ) ]\n\n\t\t\t$mol_assert_like( found[0].groups , {\n\t\t\t\tyear : '2020' ,\n\t\t\t\tmonth : '01' ,\n\t\t\t\tday : '02' ,\n\t\t\t} )\n\n\t\t},\n\n\t\t'sequence with groups of mixed type'() {\n\n\t\t\tconst prefix = '/'\n\t\t\tconst postfix = '/'\n\n\t\t\tconst regexp = $mol_regexp.from([ {prefix} , /(\\w+)/ , {postfix} , /([gumi]*)/ ])\n\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... '/foo/mi'.matchAll( regexp ) ],\n\t\t\t\t[\n\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t[ \"/foo/mi\", \"/\", \"foo\", \"/\", \"mi\" ],\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgroups: {\n\t\t\t\t\t\t\t\tprefix : '/' ,\n\t\t\t\t\t\t\t\tpostfix : '/' ,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\t\tinput: \"/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t)\n\n\t\t},\n\n\t\t'recursive sequence with groups'() {\n\n\t\t\tconst { begin , end , decimal_only: digit , repeat , from } = $mol_regexp\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\tconst dash = '-'\n\t\t\tconst month = repeat( digit , 2 , 2 )\n\t\t\tconst day = repeat( digit , 2 , 2 )\n\n\t\t\tconst regexp = from([\n\t\t\t\tbegin , { date : [ {year} , dash , {month} ] } , dash , {day} , end\n\t\t\t])\n\t\t\t\n\t\t\tconst found = [ ... '2020-01-02'.matchAll( regexp ) ]\n\n\t\t\t$mol_assert_like( found[0].groups , {\n\t\t\t\tdate : '2020-01' ,\n\t\t\t\tyear : '2020' ,\n\t\t\t\tmonth : '01' ,\n\t\t\t\tday : '02' ,\n\t\t\t} )\n\n\t\t},\n\n\t\t'parse multiple'() {\n\n\t\t\tconst { decimal_only: digit , from } = $mol_regexp\n\n\t\t\tconst regexp = from({ digit })\n\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... '123'.matchAll( regexp ) ].map( f => f.groups ) ,\n\t\t\t\t[\n\t\t\t\t\t{ digit : '1' },\n\t\t\t\t\t{ digit : '2' },\n\t\t\t\t\t{ digit : '3' },\n\t\t\t\t]\n\t\t\t)\n\n\t\t},\n\n\t\t'named variants'() {\n\n\t\t\tconst { begin , or , end , from } = $mol_regexp\n\n\t\t\tconst sexism = from([\n\t\t\t\tbegin , 'sex = ' , { sex : [ 'male' , or , 'female' ] } , end\n\t\t\t])\n\n\t\t\t$mol_assert_like( [ ... 'sex = male'.matchAll( sexism ) ][0].groups , { sex : 'male' } )\n\t\t\t$mol_assert_like( [ ... 'sex = female'.matchAll( sexism ) ][0].groups , { sex : 'female' } )\n\t\t\t$mol_assert_like( [ ... 'sex = malefemale'.matchAll( sexism ) ][0].groups , undefined )\n\n\t\t},\n\n\t\t'force after'() {\n\n\t\t\tconst { latin_only: letter , force_after , from } = $mol_regexp\n\n\t\t\tconst regexp = from([ letter , force_after( '.' ) ])\n\n\t\t\t$mol_assert_like( 'x.'.match( regexp ) , [ 'x' ] )\n\t\t\t$mol_assert_like( 'x,'.match( regexp ) , null )\n\n\t\t},\n\n\t\t'forbid after'() {\n\n\t\t\tconst { latin_only: letter , forbid_after , from } = $mol_regexp\n\n\t\t\tconst regexp = from([ letter , forbid_after( '.' ) ])\n\n\t\t\t$mol_assert_like( 'x.'.match( regexp ) , null )\n\t\t\t$mol_assert_like( 'x,'.match( regexp ) , [ 'x' ] )\n\n\t\t},\n\n\t\t'char except'() {\n\n\t\t\tconst { char_except, latin_only, tab } = $mol_regexp\n\n\t\t\tconst name = char_except( latin_only, tab )\n\n\t\t\t$mol_assert_like( 'a'.match( name ) , null )\n\t\t\t$mol_assert_like( '\\t'.match( name ) , null )\n\t\t\t$mol_assert_like( '('.match( name ) , [ '(' ] )\n\n\t\t},\n\n\t\t'unicode only'() {\n\n\t\t\tconst { unicode_only, from } = $mol_regexp\n\n\t\t\tconst name = from([\n\t\t\t\tunicode_only( 'Script', 'Cyrillic' ),\n\t\t\t\tunicode_only( 'Hex_Digit' ),\n\t\t\t])\n\n\t\t\t$mol_assert_like( 'FF'.match( name ) , null )\n\t\t\t$mol_assert_like( 'ФG'.match( name ) , null )\n\t\t\t$mol_assert_like( 'ФF'.match( name ) , [ 'ФF' ] )\n\n\t\t},\n\n\t\t'generate by optional with inner group'() {\n\n\t\t\tconst { begin, end, from } = $mol_regexp\n\t\t\t\n\t\t\tconst animals = from([ begin, '#', [ '^', { dog : '@' } ], end ])\n\n\t\t\t$mol_assert_equal( animals.generate({}) , '#' )\n\t\t\t\n\t\t\t$mol_assert_equal( animals.generate({ dog: false }) , '#' )\n\t\t\t$mol_assert_equal( animals.generate({ dog: true }) , '#^@' )\n\t\t\t\n\t\t\t$mol_assert_fail( ()=> animals.generate({ dog: '$' }) , 'Wrong param: dog=$' )\n\n\t\t},\n\n\t\t'generate by optional with inner group with variants'() {\n\n\t\t\tconst { begin, end, from } = $mol_regexp\n\t\t\t\n\t\t\tconst animals = from([ begin, '#', [ '^', { animal: { dog : '@', fox: '&' } } ], end ])\n\n\t\t\t$mol_assert_equal( animals.generate({}) , '#' )\n\t\t\t\n\t\t\t$mol_assert_equal( animals.generate({ dog: true }) , '#^@' )\n\t\t\t$mol_assert_equal( animals.generate({ fox: true }) , '#^&' )\n\t\t\t\n\t\t\t$mol_assert_fail( ()=> animals.generate({ dog: '$' }) , 'Wrong param: dog=$' )\n\n\t\t},\n\t\t\n\t\t'complex example'() {\n\t\t\t\n\t\t\tconst {\n\t\t\t\tbegin, end,\n\t\t\t\tchar_only, char_range,\n\t\t\t\tlatin_only, slash_back,\n\t\t\t\trepeat_greedy, from,\n\t\t\t} = $mol_regexp\n\t\t\t\n\t\t\tconst atom_char = char_only( latin_only, \"!#$%&'*+/=?^`{|}~-\" )\n\t\t\tconst atom = repeat_greedy( atom_char, 1 )\n\t\t\tconst dot_atom = from([ atom, repeat_greedy([ '.', atom ]) ])\n\t\t\t\n\t\t\tconst name_letter = char_only(\n\t\t\t\tchar_range( 0x01, 0x08 ),\n\t\t\t\t0x0b, 0x0c,\n\t\t\t\tchar_range( 0x0e, 0x1f ),\n\t\t\t\t0x21,\n\t\t\t\tchar_range( 0x23, 0x5b ),\n\t\t\t\tchar_range( 0x5d, 0x7f ),\n\t\t\t)\n\t\t\t\n\t\t\tconst quoted_pair = from([\n\t\t\t\tslash_back,\n\t\t\t\tchar_only(\n\t\t\t\t\tchar_range( 0x01, 0x09 ),\n\t\t\t\t\t0x0b, 0x0c,\n\t\t\t\t\tchar_range( 0x0e, 0x7f ),\n\t\t\t\t)\n\t\t\t])\n\t\t\t\n\t\t\tconst name = repeat_greedy({ name_letter, quoted_pair })\n\t\t\tconst quoted_name = from([ '\"', {name}, '\"' ])\n\t\t\t\n\t\t\tconst local_part = from({ dot_atom, quoted_name })\n\t\t\tconst domain = dot_atom\n\t\t\t\n\t\t\tconst mail = from([ begin, local_part, '@', {domain}, end ])\n\t\t\t\n\t\t\t$mol_assert_equal( 'foo..bar@example.org'.match( mail ), null )\n\t\t\t$mol_assert_equal( 'foo..bar\"@example.org'.match( mail ), null )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... 'foo.bar@example.org'.matchAll( mail ) ][0].groups,\n\t\t\t\t{\n\t\t\t\t\tdomain: \"example.org\",\n\t\t\t\t\tdot_atom: \"foo.bar\",\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tname_letter: \"\",\n\t\t\t\t\tquoted_name: \"\",\n\t\t\t\t\tquoted_pair: \"\",\n\t\t\t\t}\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... '\"foo..bar\"@example.org'.matchAll( mail ) ][0].groups,\n\t\t\t\t{\n\t\t\t\t\tdot_atom: \"\",\n\t\t\t\t\tquoted_name: '\"foo..bar\"',\n\t\t\t\t\tname: \"foo..bar\",\n\t\t\t\t\tname_letter: \"r\",\n\t\t\t\t\tquoted_pair: \"\",\n\t\t\t\t\tdomain: \"example.org\",\n\t\t\t\t}\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tmail.generate({ dot_atom: 'foo.bar', domain: 'example.org' }),\n\t\t\t\t'foo.bar@example.org',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tmail.generate({ name: 'foo..bar', domain: 'example.org' }),\n\t\t\t\t'\"foo..bar\"@example.org',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_fail(\n\t\t\t\t()=> mail.generate({ dot_atom: 'foo..bar', domain: 'example.org' }),\n\t\t\t\t'Wrong param: dot_atom=foo..bar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'empty string'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t''.match( $hyoo_crowd_tokenizer ),\n\t\t\t\tnull,\n\t\t\t)\n\t\t},\n\t\t\n\t\t'new lines'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'\\n\\r\\n'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ '\\n', '\\r\\n' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'numbers'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'123'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ '123' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'emoji'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'😀😁'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ '😀', '😁' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'emoji with modifier'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'👩🏿👩🏿'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ '👩🏿', '👩🏿' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'combo emoji with modifier'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'👩🏿‍🤝‍🧑🏿👩🏿‍🤝‍🧑🏿'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ '👩🏿‍🤝‍🧑🏿', '👩🏿‍🤝‍🧑🏿' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'word with spaces'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'foo1  bar2'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ 'foo1', ' ', ' bar2' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'word with diactric'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'Е́е́'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ 'Е́е́' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'word with punctuation'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'foo--bar'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ 'foo', '--', 'bar' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'CamelCase'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'Foo1BAR2'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ 'Foo1', 'BAR2' ],\n\t\t\t)\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\tasync 'string: Offset <=> Point'() {\n\t\t\t\n\t\t\tconst store = $hyoo_crowd_land.make({})\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'fooBar' )\n\t\t\tconst [ first, second ] = store.chief.units()\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.point_by_offset( 0 ),\n\t\t\t\t[ first.self, 0 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ first.self, 0 ]),\n\t\t\t\t[ first.self, 0 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.point_by_offset( 3 ),\n\t\t\t\t[ first.self, 3 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ first.self, 3 ]),\n\t\t\t\t[ first.self, 3 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ first.self, 5 ]),\n\t\t\t\t[ first.self, 5 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.point_by_offset( 5 ),\n\t\t\t\t[ second.self, 2 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ second.self, 2 ]),\n\t\t\t\t[ second.self, 5 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.point_by_offset( 6 ),\n\t\t\t\t[ second.self, 3 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ second.self, 3 ]),\n\t\t\t\t[ second.self, 6 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.point_by_offset( 7 ),\n\t\t\t\t[ '0_0', 1 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ '0_0', 1 ]),\n\t\t\t\t[ '0_0', 7 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\tasync 'text: Offset <=> Point'() {\n\t\t\t\n\t\t\tconst store = $hyoo_crowd_land.make({})\n\t\t\tstore.chief.as( $hyoo_crowd_text ).text( 'foo bar\\n666 777' )\n\t\t\tconst [ first, second ] = store.chief.nodes( $hyoo_crowd_text )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text ).point_by_offset( 0 ),\n\t\t\t\t[ first.units()[0].self, 0 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text ).offset_by_point([ first.units()[0].self, 0 ]),\n\t\t\t\t[ first.units()[0].self, 0 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text ).point_by_offset( 8 ),\n\t\t\t\t[ first.units()[2].self, 1 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text ).offset_by_point([ first.units()[2].self, 1 ]),\n\t\t\t\t[ first.units()[2].self, 8 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t})\n}\n","namespace $ {\n\t$mol_test( { \n\t\t\n\t\t'const returns stored value'() {\n\t\t\n\t\t\tconst foo = { bar : $mol_const( Math.random() ) }\n\t\t\t\n\t\t\t$mol_assert_equal( foo.bar() , foo.bar() )\n\t\t\t$mol_assert_equal( foo.bar() , foo.bar['()'] )\n\t\t\t\n\t\t} ,\n\n\t} )\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\t$mol_test({\n\t\t\n\t\t'Primitives'() {\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( null ), 'null' )\n\t\t\t$mol_assert_equal( $mol_key( false ), 'false' )\n\t\t\t$mol_assert_equal( $mol_key( true ), 'true' )\n\t\t\t$mol_assert_equal( $mol_key( 0 ), '0' )\n\t\t\t$mol_assert_equal( $mol_key( '' ), '\"\"' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Array & POJO'() {\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key([ null ]), '[null]' )\n\t\t\t$mol_assert_equal( $mol_key({ foo: 0 }), '{\"foo\":0}' )\n\t\t\t$mol_assert_equal( $mol_key({ foo: [false] }), '{\"foo\":[false]}' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Function'() {\n\t\t\t\n\t\t\tconst func = ()=> {}\n\t\t\t$mol_assert_equal( $mol_key( func ), $mol_key( func ) )\n\t\t\t$mol_assert_unique( $mol_key( func ), $mol_key( ()=> {} ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Objects'() {\n\t\t\t\n\t\t\tclass User {}\n\t\t\tconst jin = new User()\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( jin ), $mol_key( jin ) )\n\t\t\t$mol_assert_unique( $mol_key( jin ), $mol_key( new User() ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Elements'() {\n\t\t\t\n\t\t\tconst foo = <div>bar</div>\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( foo ), $mol_key( foo ) )\n\t\t\t$mol_assert_unique( $mol_key( foo ), $mol_key( <div>bar</div> ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Custom JSON representation'() {\n\t\t\t\n\t\t\tclass User {\n\t\t\t\tconstructor( public name: string, public age: number ) {}\n\t\t\t\ttoJSON() { return { name: this.name } }\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( new User( 'jin', 18 ) ), '{\"name\":\"jin\"}' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Special native classes'() {\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( new Date( 'xyz' ) ), 'null' )\n\t\t\t$mol_assert_equal( $mol_key( new Date( '2001-01-02T03:04:05.678Z' ) ), '\"2001-01-02T03:04:05.678Z\"' )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( /./ ), '\"/./\"' )\n\t\t\t$mol_assert_equal( $mol_key( /\\./gimsu ), '\"/\\\\\\\\./gimsu\"' )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\t$mol_test({\n\n\t\t'number'() {\n\t\t\tconst dict = new $mol_dict< number , number >()\n\t\t\t$mol_assert_equal( dict.get( 123 ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( 123 ) , false )\n\n\t\t\tdict.set( 123 , 321 )\n\t\t\t$mol_assert_equal( dict.get( 123 ) , 321 )\n\t\t\t$mol_assert_equal( dict.has( 123 ) , true )\n\n\t\t\tdict.delete( 123 )\n\t\t\t$mol_assert_equal( dict.get( 123 ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( 123 ) , false )\n\t\t} ,\n\n\t\t'pojo as key'() {\n\t\t\tconst dict = new $mol_dict< { foo : number } , number >()\n\t\t\t$mol_assert_equal( dict.get({ foo : 123 }) , undefined )\n\t\t\t$mol_assert_equal( dict.has({ foo : 123 }) , false )\n\n\t\t\tdict.set( { foo : 123 } , 321 )\n\t\t\t$mol_assert_equal( dict.get({ foo : 123 }) , 321 )\n\t\t\t$mol_assert_equal( dict.has({ foo : 123 }) , true )\n\n\t\t\tdict.delete({ foo : 123 })\n\t\t\t$mol_assert_equal( dict.get({ foo : 123 }) , undefined )\n\t\t\t$mol_assert_equal( dict.has({ foo : 123 }) , false )\n\t\t} ,\n\n\t\t'array as key'() {\n\t\t\tconst dict = new $mol_dict< [ number ] , number >()\n\t\t\t$mol_assert_equal( dict.get([ 123 ]) , undefined )\n\t\t\t$mol_assert_equal( dict.has([ 123 ]) , false )\n\n\t\t\tdict.set( [ 123 ] , 321 )\n\t\t\t$mol_assert_equal( dict.get([ 123 ]) , 321 )\n\t\t\t$mol_assert_equal( dict.has([ 123 ]) , true )\n\n\t\t\tdict.delete([ 123 ])\n\t\t\t$mol_assert_equal( dict.get([ 123 ]) , undefined )\n\t\t\t$mol_assert_equal( dict.has([ 123 ]) , false )\n\t\t} ,\n\n\t\t'html element as key'() {\n\t\t\tconst el = <div />\n\n\t\t\tconst dict = new $mol_dict< Element , number >()\n\t\t\t$mol_assert_equal( dict.get( el ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( el ) , false )\n\n\t\t\tdict.set( el , 321 )\n\t\t\t$mol_assert_equal( dict.get( el ) , 321 )\n\t\t\t$mol_assert_equal( dict.has( el ) , true )\n\t\t\t\n\t\t\t$mol_assert_equal( dict.get( <div/> ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( <div/> ) , false )\n\n\t\t\tdict.delete( el )\n\t\t\t$mol_assert_equal( dict.get( el ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( el ) , false )\n\t\t} ,\n\n\t\t'for-of key restore'() {\n\t\t\t\n\t\t\tconst dict = new $mol_dict([[ [123] , 321 ]])\n\t\t\t\n\t\t\tconst keys = [] as number[][]\n\t\t\tconst vals = [] as number[]\n\n\t\t\tfor( const [ key , val ] of dict ) {\n\t\t\t\tkeys.push( key )\n\t\t\t\tvals.push( val )\n\t\t\t}\n\n\t\t\t$mol_assert_like( keys, [ [123] ] )\n\t\t\t$mol_assert_like( vals, [ 321 ] )\n\n\t\t} ,\n\n\t\t'method iterators key restore'() {\n\t\t\tconst dict = new $mol_dict([[ [123] , 321 ]])\n\t\t\t$mol_assert_like( [ ... dict.keys() ], [ [123] ] )\n\t\t\t$mol_assert_like( [ ... dict.values() ], [ 321 ] )\n\t\t\t$mol_assert_like( [ ... dict.entries() ], [ [ [123], 321 ] ] )\n\t\t} ,\n\n\t\t'forEach key restore'() {\n\n\t\t\tconst dict = new $mol_dict([[ [123] , 321 ]])\n\t\t\t\n\t\t\tconst keys = [] as number[][]\n\t\t\tconst vals = [] as number[]\n\n\t\t\tdict.forEach( ( val , key )=> {\n\t\t\t\tkeys.push( key )\n\t\t\t\tvals.push( val )\n\t\t\t} )\n\n\t\t\t$mol_assert_like( keys, [ [123] ] )\n\t\t\t$mol_assert_like( vals, [ 321 ] )\n\t\t\t\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'fresh'() {\n\t\t\t\n\t\t\tconst clock = new $hyoo_crowd_clock\n\t\t\tclock.see_peer( 'b_33', 1 )\n\t\t\tclock.see_peer( 'm_66', 2 )\n\t\t\t\n\t\t\t$mol_assert_ok( clock.fresh( 'm_66', 3 ) )\n\t\t\t$mol_assert_ok( clock.fresh( 'x_99', 1 ) )\n\t\t\t\n\t\t\t$mol_assert_not( clock.fresh( 'm_66', 1 ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'fork'() {\n\t\t\t\n\t\t\tconst left = new $hyoo_crowd_clock\n\t\t\tleft.see_peer( 'b_33', 1 )\n\t\t\tleft.see_peer( 'm_66', 2 )\n\t\t\t\n\t\t\tconst right = new $hyoo_crowd_clock( left )\n\t\t\t\n\t\t\t$mol_assert_equal( right.last_time, 2 )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... right ],\n\t\t\t\t[\n\t\t\t\t\t[ 'b_33', 1 ],\n\t\t\t\t\t[ 'm_66', 2 ],\n\t\t\t\t],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'generate'() {\n\t\t\t\n\t\t\tconst clock = new $hyoo_crowd_clock\n\t\t\tclock.see_peer( 'b_33', $mol_int62_min + 1 )\n\t\t\tclock.see_peer( 'm_66', $mol_int62_min + 2 )\n\t\t\t\n\t\t\tconst now = clock.now() as number\n\t\t\t\n\t\t\tconst time1 = clock.tick( 'b_33' )\n\t\t\t$mol_assert_like( time1, now )\n\t\t\t$mol_assert_like( clock.last_time, now )\n\t\t\t\n\t\t\tclock.see_peer( 'm_66', clock.now() + 10 )\n\t\t\t\n\t\t\tconst time2 = clock.tick( 'm_66' )\n\t\t\t$mol_assert_like( time2, now + 11 )\n\t\t\t$mol_assert_like( clock.last_time, now + 11 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'ahead'() {\n\t\t\t\n\t\t\tconst clock1 = new $hyoo_crowd_clock\n\t\t\tclock1.see_peer( 'b_33', 1 )\n\t\t\tclock1.see_peer( 'm_66', 2 )\n\t\t\t\n\t\t\tconst clock2 = new $hyoo_crowd_clock\n\t\t\tclock2.see_peer( 'b_33', 1 )\n\t\t\tclock2.see_peer( 'x_99', 2 )\n\t\t\t\n\t\t\tconst clock3 = new $hyoo_crowd_clock\n\t\t\tclock3.see_peer( 'b_33', 1 )\n\t\t\tclock3.see_peer( 'm_66', 2 )\n\t\t\tclock3.see_peer( 'x_99', 2 )\n\t\t\t\n\t\t\t$mol_assert_ok( clock1.ahead( clock2 ) )\n\t\t\t$mol_assert_ok( clock2.ahead( clock1 ) )\n\t\t\t\n\t\t\t$mol_assert_ok( clock3.ahead( clock1 ) )\n\t\t\t$mol_assert_ok( clock3.ahead( clock2 ) )\n\t\t\t\n\t\t\t$mol_assert_not( clock1.ahead( clock3 ) )\n\t\t\t$mol_assert_not( clock2.ahead( clock3 ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'bin'() {\n\t\t\t\n\t\t\tconst clocks1 = [ new $hyoo_crowd_clock, new $hyoo_crowd_clock ] as const\n\t\t\tclocks1[ $hyoo_crowd_unit_group.auth ].see_peer( 'b_33', 1 )\n\t\t\tclocks1[ $hyoo_crowd_unit_group.data ].see_peer( 'b_33', 2 )\n\t\t\t\n\t\t\tconst bin = $hyoo_crowd_clock_bin.from( '2_b', clocks1 )\n\t\t\t\n\t\t\t$mol_assert_like( bin.land(), '2_b' )\n\t\t\t\n\t\t\tconst clocks2 = [ new $hyoo_crowd_clock, new $hyoo_crowd_clock ] as const\n\t\t\tclocks2[ $hyoo_crowd_unit_group.auth ].see_bin( bin, $hyoo_crowd_unit_group.auth )\n\t\t\tclocks2[ $hyoo_crowd_unit_group.data ].see_bin( bin, $hyoo_crowd_unit_group.data )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tclocks2.map( clock => new Map( clock ) ),\n\t\t\t\t[\n\t\t\t\t\tnew Map([\n\t\t\t\t\t\t[ 'b_33', 1 ],\n\t\t\t\t\t]),\n\t\t\t\t\tnew Map([\n\t\t\t\t\t\t[ 'b_33', 2 ],\n\t\t\t\t\t]),\n\t\t\t\t]\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\tasync 'world delta & apply'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\t\n\t\t\tconst land1 = await world1.grab()\n\t\t\tconst land2 = await world1.grab()\n\t\t\t\n\t\t\t// do changes\n\t\t\tland1.chief.as( $hyoo_crowd_list ).list([ 123, 456 ])\n\t\t\tland2.chief.as( $hyoo_crowd_list ).list([ 456, 789 ])\n\t\t\t\n\t\t\t// apply changes\n\t\t\tfor await( const batch of world1.delta() ) {\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t( await world2.apply( batch ) ).forbid,\n\t\t\t\t\tnew Map,\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tworld2.land( land1.id() ).chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\t[ 123, 456 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tworld2.land( land2.id() ).chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\t[ 456, 789 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'land delta & apply'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\t\n\t\t\tconst land = world1.land( world1.peer!.id )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland.chief.as( $hyoo_crowd_list ).list([ 123, 456 ])\n\t\t\t\n\t\t\t// apply changes\n\t\t\tfor( const batch of await world1.delta_batch( land ) ) {\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t( await world2.apply( batch ) ).forbid,\n\t\t\t\t\tnew Map,\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tworld2.land( land.id() ).chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\t[ 123, 456 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'ignore changes from far future'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst land = await world1.grab()\n\t\t\t\n\t\t\t// go to future\n\t\t\tconst clock = land.clock_data\n\t\t\tclock.see_time( clock.now() + 60 * 60 * 24 * 10 )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland.chief.as( $hyoo_crowd_reg ).numb( 123 )\n\t\t\t\n\t\t\t// 1 ignored units\n\t\t\tfor( const batch of await world1.delta_batch( land ) ) {\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[ 'Far future' ],\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t\t// only 3 grab units\n\t\t\t$mol_assert_like( world2.land( land.id() ).delta().length, 3 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'ignore auth as another peer'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( { ... await $hyoo_crowd_peer.generate(), id: '1_1' } )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst land = await world1.grab()\n\t\t\t\n\t\t\t// do changes\n\t\t\tland.chief.as( $hyoo_crowd_reg ).numb( 123 )\n\t\t\t\n\t\t\t// 2 ignored units\n\t\t\tfor( const batch of await world1.delta_batch( land ) ) {\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[ 'Alien join key', 'No auth key' ],\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t\t// only 2 grab units\n\t\t\t$mol_assert_like( world2.land( land.id() ).delta().length, 2 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'ignore auth without key'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( { ... await $hyoo_crowd_peer.generate(), key_public_serial: [] as any } )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst land = world1.land( '1_1' )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland.chief.as( $hyoo_crowd_reg ).numb( 123 )\n\t\t\t\n\t\t\t// 2 ignored units\n\t\t\tfor( const batch of await world1.delta_batch( land ) ) {\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[ 'No join key', 'Level too low' ],\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t\t// only 2 grab units\n\t\t\t$mol_assert_like( world2.land( land.id() ).delta().length, 0 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'ignore changes with wrong signs'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst land = await world1.grab()\n\t\t\t\n\t\t\t// 2 ignored units\n\t\t\tfor( const batch of await world1.delta_batch( land ) ) {\n\t\t\t\t\n\t\t\t\tbatch[152] = ~batch[152] // break sign\n\t\t\t\t\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[ 'Wrong join sign', 'Level too low' ],\n\t\t\t\t)\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t// no applied units \n\t\t\t$mol_assert_like( world2.land( land.id() ).delta().length, 0 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'ignore update auth'() {\n\t\t\t\n\t\t\tconst peer = await $hyoo_crowd_peer.generate()\n\t\t\tconst world1 = new $hyoo_crowd_world( peer )\n\t\t\tconst world2 = new $hyoo_crowd_world( peer )\n\t\t\tconst land = await world1.grab()\n\t\t\t\n\t\t\t// do changes\n\t\t\tland.chief.as( $hyoo_crowd_reg ).numb( 123 )\n\t\t\tworld2.land( land.id() ).chief.as( $hyoo_crowd_reg ).numb( 234 )\n\t\t\t\n\t\t\t// 1 ignored unit\n\t\t\tfor( const batch of await world1.delta_batch( land ) ) {\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[ 'Already join' ],\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t\t// 5 units applied\n\t\t\t$mol_assert_like( world2.land( land.id() ).delta().length, 5 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'levels'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\t\n\t\t\tconst peer = await $hyoo_crowd_peer.generate()\n\t\t\t\n\t\t\tconst land1 = await world1.grab() // +3 units\n\t\t\tconst land2 = world2.land( land1.id() )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland1.chief.sub( 'foo', $hyoo_crowd_reg ).numb( 123 ) // +1 unit\n\t\t\t\n\t\t\tfor await( const batch of world1.delta() ) {\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[],\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t\tland2.chief.sub( 'foo', $hyoo_crowd_reg ).numb( 234 ) // 1 unit update +1 unit\n\t\t\tland2.chief.sub( 'bar', $hyoo_crowd_reg ).numb( 234 ) // +1 unit\n\t\t\tland2.level( peer.id, $hyoo_crowd_peer_level.law ) // +1 unit\n\t\t\t\n\t\t\t$mol_assert_like( land1.delta().length, 4 )\n\t\t\t\n\t\t\tlevel_get: {\n\t\t\t\t\n\t\t\t\tfor( const batch of await world2.delta_batch( land2 ) ) {\n\t\t\t\t\t$mol_assert_like(\n\t\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t\t[ 'Already join', 'Already join', 'Level too low', 'Level too low', 'Level too low' ],\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 5 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 123 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 0 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.get )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlevel_add: {\n\t\t\t\t\n\t\t\t\tland1.level( land2.peer().id, $hyoo_crowd_peer_level.add ) // +1 unit\n\t\t\t\t\n\t\t\t\tfor( const batch of await world2.delta_batch( land2 ) ) {\n\t\t\t\t\t$mol_assert_like(\n\t\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t\t[ 'Already join', 'Already join', 'Already join', 'Level too low', 'Level too low' ],\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 7 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 123 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.get )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlevel_mod: {\n\t\t\t\t\n\t\t\t\tland1.level( land2.peer().id, $hyoo_crowd_peer_level.mod )\n\t\t\t\t\n\t\t\t\tfor( const batch of await world2.delta_batch( land2 ) ) {\n\t\t\t\t\t$mol_assert_like(\n\t\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t\t[ 'Already join', 'Already join', 'Already join', 'Level too low' ],\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 7 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.get )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlevel_law: {\n\t\t\t\t\n\t\t\t\tland1.level( land2.peer().id, $hyoo_crowd_peer_level.law )\n\t\t\t\t\n\t\t\t\tfor( const batch of await world2.delta_batch( land2 ) ) {\n\t\t\t\t\t$mol_assert_like(\n\t\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t\t[ 'Already join', 'Already join', 'Already join' ],\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 8 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.law )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'default level'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\t\n\t\t\tconst peer = await $hyoo_crowd_peer.generate()\n\t\t\t\n\t\t\tconst land1 = await world1.grab()\n\t\t\tconst land2 = world2.land( land1.id() )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland1.chief.sub( 'foo', $hyoo_crowd_reg ).numb( 123 )\n\t\t\t\n\t\t\tfor( const batch of await world1.delta_batch( land1 ) ) {\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[],\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t\tland2.chief.sub( 'foo', $hyoo_crowd_reg ).numb( 234 )\n\t\t\tland2.chief.sub( 'bar', $hyoo_crowd_reg ).numb( 234 )\n\t\t\tland2.level( peer.id, $hyoo_crowd_peer_level.law ) \n\t\t\t\n\t\t\t$mol_assert_like( land1.delta().length, 4 )\n\t\t\t\n\t\t\tlevel_add: {\n\t\t\t\t\n\t\t\t\tland1.level_base( $hyoo_crowd_peer_level.add )\n\t\t\t\t\n\t\t\t\tfor( const batch of await world2.delta_batch( land2 ) ) {\n\t\t\t\t\t$mol_assert_like(\n\t\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t\t[ 'Already join', 'Already join', 'Level too low', 'Level too low' ],\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 7 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 123 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.add )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlevel_mod: {\n\t\t\t\t\n\t\t\t\tland1.level_base( $hyoo_crowd_peer_level.mod )\n\t\t\t\t\n\t\t\t\tfor( const batch of await world2.delta_batch( land2 ) ) {\n\t\t\t\t\t$mol_assert_like(\n\t\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t\t[ 'Already join', 'Already join', 'Already join', 'Level too low' ],\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 7 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.mod )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlevel_law: {\n\t\t\t\t\n\t\t\t\tland1.level_base( $hyoo_crowd_peer_level.law )\n\t\t\t\t\n\t\t\t\tfor( const batch of await world2.delta_batch( land2 ) ) {\n\t\t\t\t\t$mol_assert_like(\n\t\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t\t[ 'Already join', 'Already join', 'Already join' ],\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 8 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.law )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'run callback' () {\n\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\t$mol_assert_equal( Plus1.run( ()=> 2 ) , 3 )\n\n\t\t} ,\n\n\t\t'wrap function' () {\n\t\t\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t\tconst obj = {\n\t\t\t\tlevel : 2 ,\n\t\t\t\tpow : Plus1.func( function( this : { level : number } , a ) {\n\t\t\t\t\treturn a ** this.level\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\t$mol_assert_equal( obj.pow( 2 ) , 5 )\n\n\t\t} ,\n\n\t\t'decorate field getter' () {\n\n\t\t\tclass Plus1 extends $mol_wrapper {\n\n\t\t\t\tstatic last = 0\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn Plus1.last = ( task.call( this , ... args ) || 0 ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\tclass Foo {\n\n\t\t\t\t@ Plus1.field\n\t\t\t\tstatic get two() {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t\tstatic set two( next : number ) {}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\t\t\t\n\t\t\tFoo.two = 3\n\t\t\t$mol_assert_equal( Plus1.last , 2 )\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\n\t\t} ,\n\n\t\t'decorate instance method' () {\n\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\tclass Foo1 {\n\n\t\t\t\tlevel = 2\n\n\t\t\t\t@ Plus1.method\n\t\t\t\tpow( a : number ) {\n\t\t\t\t\treturn a ** this.level\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tconst Foo2 = Foo1\n\t\t\tconst foo = new Foo2\n\n\t\t\t$mol_assert_equal( foo.pow( 2 ) , 5 )\n\n\t\t} ,\n\n\t\t'decorate static method' () {\n\t\t\t\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\tclass Foo {\n\n\t\t\t\tstatic level = 2\n\n\t\t\t\t@ Plus1.method\n\t\t\t\tstatic pow( a : number ) {\n\t\t\t\t\treturn a ** this.level\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( Foo.pow( 2 ) , 5 )\n\n\t\t} ,\n\n\t\t'decorate class' () {\n\t\t\t\n\t\t\tclass BarInc extends $mol_wrapper {\n\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> Foo ) {\n\t\t\t\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\n\t\t\t\t\t\tconst foo = task.call( this , ...args )\n\t\t\t\t\t\tfoo.bar ++\n\t\t\t\t\t\treturn foo\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\t@ BarInc.class\n\t\t\tclass Foo {\n\t\t\t\tconstructor( public bar : number ) {}\n\t\t\t}\n\n\t\t\t$mol_assert_equal( new Foo( 2 ).bar , 3 )\n\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'memoize field' () {\n\n\t\t\tclass Foo {\n\n\t\t\t\tstatic one = 1\n\n\t\t\t\t@ $mol_memo.field\n\t\t\t\tstatic get two() {\n\t\t\t\t\treturn ++ this.one\n\t\t\t\t}\n\t\t\t\tstatic set two( next : number ) {} \n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\n\t\t\tFoo.two = 3\n\t\t\t\n\t\t\t$mol_assert_equal( Foo.two , 3 )\n\t\t\t$mol_assert_equal( Foo.two , 3 )\n\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\t\n\tasync function make_land( id = '2_b' as $mol_int62_string ) {\n\t\treturn $hyoo_crowd_land.make({\n\t\t\tid: $mol_const( id ),\n\t\t\tpeer: $mol_const( await $hyoo_crowd_peer.generate() ),\n\t\t})\n\t}\n\t\n\t$mol_test({\n\t\t\n\t\tasync 'Default state'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), null )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).bool(), false )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).numb(), 0 )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).str(), '' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [] )\n\t\t\t$mol_assert_like( store.delta(), [] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Return default state'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tconst reg = store.chief.as( $hyoo_crowd_reg )\n\t\t\tconst list = store.chief.as( $hyoo_crowd_list )\n\t\t\tconst text = store.chief.as( $hyoo_crowd_text )\n\t\t\t\n\t\t\t$mol_assert_like( reg.bool( false ), false )\n\t\t\t$mol_assert_like( reg.str( '' ), '' )\n\t\t\t$mol_assert_like( reg.numb( 0 ), 0 )\n\t\t\t$mol_assert_like( text.str( '' ), '' )\n\t\t\t$mol_assert_like( reg.value( null ), null )\n\t\t\t$mol_assert_like( list.list(), [] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Serial changes'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tObject.assign( store.peer(), { key_public_serial: null } )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), null )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [] )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).bool(), false )\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).bool( true )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), true )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ true ] )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).numb(), 1 )\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).numb( 1 )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), 1 )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 1 ] )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).str(), '1' )\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).str( 'x' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), 'x' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'x' ] )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).value( null )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), null )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [] )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta().map( unit => unit.data ),\n\t\t\t\t[ null ]\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Name spaces'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.sub( 'foo', $hyoo_crowd_struct ).sub( 'bar', $hyoo_crowd_reg ).numb( 111 )\n\t\t\tstore.chief.sub( 'foo', $hyoo_crowd_struct ).sub( 'ton', $hyoo_crowd_reg ).numb( 222 )\n\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [] )\n\t\t\t$mol_assert_like( store.chief.sub( 'foo', $hyoo_crowd_list ).list(), [] )\n\t\t\t$mol_assert_like( store.chief.sub( 'foo', $hyoo_crowd_struct ).sub( 'bar', $hyoo_crowd_list ).list(), [ 111 ] )\n\t\t\t$mol_assert_like( store.chief.sub( 'foo', $hyoo_crowd_struct ).sub( 'ton', $hyoo_crowd_list ).list(), [ 222 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Name spaces merging'() {\n\t\t\t\n\t\t\tconst left = await make_land()\n\t\t\tleft.chief.sub( 'foo', $hyoo_crowd_list ).list([ 111 ])\n\t\t\t\n\t\t\tconst right = await make_land('a_2')\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.chief.sub( 'foo', $hyoo_crowd_list ).list([ 222 ])\n\t\t\t\n\t\t\tconst left_delta = left.delta()\n\t\t\tconst right_delta = right.delta()\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.sub( 'foo', $hyoo_crowd_list ).list(),\n\t\t\t\tright.chief.sub( 'foo', $hyoo_crowd_list ).list(),\n\t\t\t\t[ 222, 111 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Ignore same changes'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).str( 'foo' )\n\t\t\tconst time = store.clock_data.last_time\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).str( 'foo' )\n\t\t\tstore.chief.as( $hyoo_crowd_list ).list( [ 'foo' ] )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta().map( unit => unit.time ),\n\t\t\t\t[ time, time ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Serial insert values'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert([ 'foo' ])\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert([ 'bar' ])\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foo', 'bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Concurent insert values'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert( [ 'foo' ], 0 )\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert( [ 'bar' ], 0 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'bar', 'foo' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert value between others'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert([ 'foo' ])\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert([ 'bar' ])\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert( [ 'lol' ], 1 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foo', 'lol', 'bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert value inside other'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert([ 'foo' ])\n\t\t\tstore.chief.nodes( $hyoo_crowd_list )[0].insert([ 'bar' ])\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foo' ] )\n\t\t\t$mol_assert_like( store.chief.nodes( $hyoo_crowd_list )[0].list(), [ 'bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert before removed before changed'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tconst node = store.chief.as( $hyoo_crowd_list )\n\t\t\t\n\t\t\tnode.list([ 'foo', 'bar' ])\n\t\t\tnode.list([ 'xxx', 'foo', 'bar' ])\n\t\t\tnode.list([ 'xxx', 'bars' ])\n\t\t\t\n\t\t\t$mol_assert_like( node.list(), [ 'xxx', 'bars' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Move existen Unit'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'FooBarLol' )\n\t\t\tstore.chief.as( $hyoo_crowd_list ).move( 0, 2 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'BarFooLol' )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Deltas for different versions'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tObject.assign( store.peer(), { key_public_serial: null } )\n\t\t\t\n\t\t\tstore.clock_data.see_time( store.clock_data.now() + 60 )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).list( [ 'foo', 'bar', 'lol' ] )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta([\n\t\t\t\t\tnew $hyoo_crowd_clock,\n\t\t\t\t\tnew $hyoo_crowd_clock([\n\t\t\t\t\t\t[ store.peer().id, store.clock_data.last_time - 3 ],\n\t\t\t\t\t])\n\t\t\t\t]).map( unit => unit.data ),\n\t\t\t\t[ 'foo', 'bar', 'lol' ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta([\n\t\t\t\t\tnew $hyoo_crowd_clock,\n\t\t\t\t\tnew $hyoo_crowd_clock([\n\t\t\t\t\t\t[ store.peer().id, store.clock_data.last_time - 2 ],\n\t\t\t\t\t])\n\t\t\t\t]).map( unit => unit.data ),\n\t\t\t\t[ 'bar', 'lol' ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta([\n\t\t\t\t\tnew $hyoo_crowd_clock,\n\t\t\t\t\tnew $hyoo_crowd_clock([\n\t\t\t\t\t\t[ store.peer().id, store.clock_data.last_time - 1 ],\n\t\t\t\t\t])\n\t\t\t\t]).map( unit => unit.data ),\n\t\t\t\t[ 'lol' ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta([\n\t\t\t\t\tnew $hyoo_crowd_clock,\n\t\t\t\t\tnew $hyoo_crowd_clock([\n\t\t\t\t\t\t[ store.peer().id, store.clock_data.last_time ],\n\t\t\t\t\t])\n\t\t\t\t]),\n\t\t\t\t[],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Delete without subtree and ignore inserted into deleted'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo' )\n\t\t\t\n\t\t\tconst b2 = store.chief.nodes( $hyoo_crowd_text )[0]\n\t\t\tb2.str( 'bar' )\n\t\t\t\n\t\t\tconst b3 = b2.nodes( $hyoo_crowd_text )[0]\n\t\t\tb3.str( 'lol' )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), 'foo' )\n\t\t\t$mol_assert_like( b2.as( $hyoo_crowd_reg ).value(), 'bar' )\n\t\t\t$mol_assert_like( b3.as( $hyoo_crowd_reg ).value(), 'lol' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).cut( 0 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), null )\n\t\t\t$mol_assert_like( b2.as( $hyoo_crowd_reg ).value(), 'bar' )\n\t\t\t$mol_assert_like( b3.as( $hyoo_crowd_reg ).value(), 'lol' )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Put/get list'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [] )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).list( [ 'foo', 'bar', 'foo' ] )\n\t\t\tconst first = store.chief.nodes( $hyoo_crowd_list )[0]\n\t\t\tfirst.list( [  'bar', 'foo', 'bar' ] )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foo', 'bar', 'foo' ] )\n\t\t\t$mol_assert_like( first.list(), [ 'bar', 'foo', 'bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Put/get text'() {\n\t\t\t\n\t\t\tconst store1 = await make_land()\n\t\t\t\n\t\t\tstore1.chief.as( $hyoo_crowd_text ).str( 'foo bar foo' )\n\t\t\t$mol_assert_like( store1.chief.as( $hyoo_crowd_text ).str(), 'foo bar foo' )\n\t\t\t$mol_assert_like( store1.chief.as( $hyoo_crowd_list ).list(), [ 'foo', ' bar', ' foo' ] )\n\t\t\t\n\t\t\tconst store2 = store1.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tstore2.chief.as( $hyoo_crowd_text ).str( 'barFFFoo  bar' )\n\t\t\t$mol_assert_like( store2.chief.as( $hyoo_crowd_text ).str(), 'barFFFoo  bar' )\n\t\t\t$mol_assert_like( store2.chief.as( $hyoo_crowd_list ).list(), [ 'bar', 'FFFoo', ' ', ' bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Text modifications'() {\n\t\t\t\n\t\t\tconst store1 = await make_land()\n\t\t\tstore1.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\t\n\t\t\tconst store2 = store1.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tstore2.chief.as( $hyoo_crowd_text ).str( 'foo  bar' )\n\t\t\t$mol_assert_like(\n\t\t\t\tstore1.chief.units().map( unit => unit.self ),\n\t\t\t\t[\n\t\t\t\t\tstore2.chief.units()[0].self,\n\t\t\t\t\tstore2.chief.units()[2].self,\n\t\t\t\t],\n\t\t\t)\n\t\t\t\n\t\t\tconst store3 = store2.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tstore3.chief.as( $hyoo_crowd_text ).str( 'foo ton bar' )\n\t\t\t$mol_assert_like(\n\t\t\t\tstore2.chief.units().map( unit => unit.self ),\n\t\t\t\t[\n\t\t\t\t\tstore3.chief.units()[0].self,\n\t\t\t\t\tstore3.chief.units()[1].self,\n\t\t\t\t\tstore3.chief.units()[2].self,\n\t\t\t\t],\n\t\t\t)\n\t\t\t\n\t\t\tconst store4 = store3.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tstore4.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\t$mol_assert_like(\n\t\t\t\t[\n\t\t\t\t\tstore3.chief.units()[0].self,\n\t\t\t\t\tstore3.chief.units()[2].self,\n\t\t\t\t],\n\t\t\t\tstore4.chief.units().map( unit => unit.self ),\n\t\t\t)\n\t\t\t\n\t\t\tconst store5 = store3.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tstore5.chief.as( $hyoo_crowd_text ).str( 'foo ' )\n\t\t\t$mol_assert_like(\n\t\t\t\t[\n\t\t\t\t\tstore4.chief.units()[0].self,\n\t\t\t\t\tstore4.chief.units()[1].self,\n\t\t\t\t],\n\t\t\t\tstore5.chief.units().map( unit => unit.self ),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Change sequences'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), '' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'foo' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'foo bar' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo lol bar' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'foo lol bar' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'lol bar' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'lol bar' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'foo bar' )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Merge different sequences'() {\n\t\t\t\n\t\t\tconst left = await make_land()\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'foo bar.' )\n\t\t\t\n\t\t\tconst right = await make_land('a_2')\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.chief.as( $hyoo_crowd_text ).str( 'xxx yyy.' )\n\t\t\t\n\t\t\tconst left_delta = left.delta()\n\t\t\tconst right_delta = right.delta()\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'xxx yyy.foo bar.',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Merge different insertions to same place of same sequence'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'foo xxx bar' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.chief.as( $hyoo_crowd_text ).str( 'foo yyy bar' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'foo yyy xxx bar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert after moved'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'FooBarZak' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'FooXxxBarZak' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.insert( right.chief.units()[0], '0_0', 2 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'XxxBarFooZak',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert before moved left'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'fooBarZak' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'FooXxxBarZak' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.insert( right.chief.units()[1], '0_0', 0 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'BarFooXxxZak',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert before moved right'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'FooBarZak' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'FooXxxBarZak' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.insert( right.chief.units()[1], '0_0', 3 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'FooXxxZakBar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert after removed'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'FooBar' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'FooXxxBar' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.chief.as( $hyoo_crowd_text ).str( 'Bar' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'XxxBar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert after removed out'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\t$hyoo_crowd_text.for( base, '1_1' ).str( 'FooBarZak' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\t$hyoo_crowd_text.for( left, '1_1' ).str( 'FooBarXxxZak' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.insert( $hyoo_crowd_node.for( right, '1_1' ).units()[1], '2_2', 0 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\t$hyoo_crowd_text.for( left, '1_1' ).str(),\n\t\t\t\t$hyoo_crowd_text.for( right, '1_1' ).str(),\n\t\t\t\t'FooXxxZak',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t$hyoo_crowd_text.for( left, '2_2' ).str(),\n\t\t\t\t$hyoo_crowd_text.for( right, '2_2' ).str(),\n\t\t\t\t'Bar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert before changed'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'XxxYyyZzz' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'XxxFooYyyZzz' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.chief.as( $hyoo_crowd_text ).str( 'XxxBarZzz' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'XxxBarFooZzz',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert between moved'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_list ).list([ 111, 222, 333, 444, 555, 666 ])\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_list ).list([ 111, 222, 777, 333, 444, 555, 666 ])\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.insert( right.chief.units()[1], '0_0', 5 )\n\t\t\tright.insert( right.chief.units()[1], '0_0', 5 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\tright.chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\t[ 111, 444, 555, 222, 333, 777, 666 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Merge text changes'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'Hello World and fun!' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\t\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'Hello Alice and fun!' )\n\t\t\tright.chief.as( $hyoo_crowd_text ).str( 'Bye World and fun!' )\n\t\t\t\n\t\t\tconst left_delta = left.delta()\n\t\t\tconst right_delta = right.delta()\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'Bye Alice and fun!',\n\t\t\t)\n\n\t\t},\n\t\t\n\t\tasync 'Write into token'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foobar' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'xyz', 3 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'fooxyzbar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write into token with split'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foobar' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'XYZ', 2, 4 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'fo', 'XYZar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write over few tokens'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'xxx foo bar yyy' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'X Y Z', 6, 9 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'xxx', ' fo', 'X', ' Y', ' Zar', ' yyy' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write whole token'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'xxxFoo yyy' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'bar', 3, 7 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'xxxbaryyy' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write whole text'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'xxx', 0, 7 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'xxx' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write at the end'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'bar' )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foobar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write between tokens'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'xxx', 4 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foo', ' xxxbar' ] )\n\t\t\t\n\t\t},\n\n\t})\n}\n","namespace $ {\n\t\n\texport class $mol_wire_log extends $mol_object2 {\n\t\t\n\t\t@ $mol_mem\n\t\tstatic watch( task?: ()=> any ) {\n\t\t\treturn task\n\t\t}\n\t\t\n\t\t@ $mol_mem_key\n\t\tstatic track( fiber: $mol_wire_fiber< any, any, any > ) {\n\t\t\t\n\t\t\tconst prev = $mol_wire_probe( ()=> this.track( fiber ) )\n\t\t\tlet next: any\n\t\t\t\n\t\t\ttry {\n\t\t\t\tnext = fiber.sync()\n\t\t\t} finally {\n\t\t\t\t\n\t\t\t\tfor( const pub of fiber.pub_list ) {\n\t\t\t\t\tif( pub instanceof $mol_wire_fiber ) {\n\t\t\t\t\t\tthis.track( pub )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif( prev !== undefined && !$mol_compare_deep( prev, next ) ) {\n\t\t\t\tthis.$.$mol_log3_rise({\n\t\t\t\t\tmessage: 'Changed',\n\t\t\t\t\tplace: fiber,\n\t\t\t\t})\n\t\t\t}\n\t\t\n\t\t\treturn next\n\t\t}\n\t\t\n\t\t@ $mol_mem\n\t\tstatic active() {\n\t\t\t\n\t\t\ttry {\n\t\t\t\tthis.watch()?.()\n\t\t\t} finally {\n\t\t\t\tfor( const pub of ( $mol_wire_auto() as $mol_wire_fiber< any, any, any > ).pub_list ) {\n\t\t\t\t\tif( pub instanceof $mol_wire_fiber ) {\n\t\t\t\t\t\tthis.track( pub )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n}\n","namespace $ {\n\t\n\t$mol_wire_log.active()\n\n}\n","namespace $ {\n\t\n\tasync function make_land( id = '1_1' as $mol_int62_string ) {\n\t\treturn $hyoo_crowd_land.make({\n\t\t\tid: $mol_const( id ),\n\t\t\tpeer: $mol_const( await $hyoo_crowd_peer.generate() ),\n\t\t})\n\t}\n\t\n\t$mol_test({\n\t\t\n\t\tasync 'save and load json array with primitives'() {\n\t\t\t\n\t\t\tconst land = await make_land()\n\t\t\t\n\t\t\tconst node = land.chief.as( $hyoo_crowd_json )\n\t\t\tnode.json({\n\t\t\t\tempty: null,\n\t\t\t\tboolean: [ false, true ],\n\t\t\t\tobject: {\n\t\t\t\t\tnumber: 0,\n\t\t\t\t\tstring: [ '', 'lol' ],\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnode.json(),\n\t\t\t\t{\n\t\t\t\t\tempty: null,\n\t\t\t\t\tboolean: [ false, true ],\n\t\t\t\t\tobject: {\n\t\t\t\t\t\tnumber: 0,\n\t\t\t\t\t\tstring: [ '', 'lol' ],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'import exported html'() {\n\t\t\t\n\t\t\tconst left = $hyoo_crowd_land.make({ id: ()=> '1_1' })\n\t\t\tleft.chief.as( $hyoo_crowd_html ).html( '<body>foo<i data-xxx=\"yyy\">ton</i>bar</body>' )\n\t\t\tconst html = left.chief.as( $hyoo_crowd_html ).html()\n\t\t\t\n\t\t\tconst right = $hyoo_crowd_land.make({ id: ()=> '2_2' })\n\t\t\tright.chief.as( $hyoo_crowd_html ).html( html )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\t[ 'foo', [ 'i', { \"data-xxx\": \"yyy\" } ], 'bar' ],\n\t\t\t)\n\t\t\t$mol_assert_equal( left.chief.nodes( $hyoo_crowd_text )[1].text(), 'ton' )\n\t\t\t\n\t\t\t$mol_assert_equal( html, left.chief.as( $hyoo_crowd_html ).html() )\n\t\t\t$mol_assert_equal(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'footonbar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'import wild spans'() {\n\t\t\t\n\t\t\tconst land = $hyoo_crowd_land.make({ id: ()=> '1_1' })\n\t\t\tland.chief.as( $hyoo_crowd_html ).html( '<body><span>foo bar<a href=\"ton\"/></span></body>' )\n\t\t\t\n\t\t\tconst dom = land.chief.as( $hyoo_crowd_dom ).dom()\n\t\t\t$mol_assert_equal( dom.children[0].nodeName, 'SPAN' )\n\t\t\t$mol_assert_equal( dom.children[0].textContent, 'foo' )\n\t\t\t$mol_assert_equal( dom.children[1].nodeName, 'SPAN' )\n\t\t\t$mol_assert_equal( dom.children[1].textContent, ' bar' )\n\t\t\t$mol_assert_equal( dom.children[2].nodeName, 'A' )\n\t\t\t$mol_assert_equal( dom.children[2].getAttribute( 'href' ), 'ton' )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( context => {\n\t\tclass $mol_state_arg_mock extends $mol_state_arg {\n\n\t\t\tstatic $ = context\n\t\t\t\t\t\t\n\t\t\t@ $mol_mem\n\t\t\tstatic href( next? : string ) { return next || '' }\n\t\n\t\t}\n\t\tcontext.$mol_state_arg = $mol_state_arg_mock\n\t} )\n\n\t$mol_test({\n\t\t\n\t\t'args as dictionary'( $ ) {\n\t\t\t\n\t\t\t$.$mol_state_arg.href( '#!foo=bar/xxx' )\n\t\t\t$mol_assert_like( $.$mol_state_arg.dict() , { foo : 'bar' , xxx : '' } )\n\n\t\t\t$.$mol_state_arg.dict({ foo : null , yyy : '' , lol : '123' })\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!yyy/lol=123' )\n\n\t\t} ,\n\n\t\t'one value from args'( $ ) {\n\t\t\t\n\t\t\t$.$mol_state_arg.href( '#!foo=bar/xxx' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.value( 'foo' ) , 'bar' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.value( 'xxx' ) , '' )\n\n\t\t\t$.$mol_state_arg.value( 'foo' , 'lol' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!foo=lol/xxx' )\n\n\t\t\t$.$mol_state_arg.value( 'foo' , '' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!foo/xxx' )\n\n\t\t\t$.$mol_state_arg.value( 'foo' , null )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!xxx' )\n\n\t\t} ,\n\n\t\t'nested args'( $ ) {\n\n\t\t\tconst base = new $.$mol_state_arg( 'nested.' )\n\n\t\t\tclass Nested extends $mol_state_arg {\n\t\t\t\tconstructor( prefix : string ) {\n\t\t\t\t\tsuper( base.prefix + prefix )\n\t\t\t\t}\n\t\t\t\tstatic value = ( key : string , next? : string )=> base.value( key , next )\n\t\t\t}\n\t\t\t\n\t\t\t$.$mol_state_arg.href( '#!foo=bar/nested.xxx=123' )\n\t\t\t$mol_assert_equal( Nested.value( 'foo' ) , null )\n\t\t\t$mol_assert_equal( Nested.value( 'xxx' ) , '123' )\n\n\t\t\tNested.value( 'foo' , 'lol' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!foo=bar/nested.xxx=123/nested.foo=lol' )\n\n\t\t} ,\n\n\t})\n\t\n}\n","namespace $ {\n\t\n\texport function $hyoo_harp_to_string< Query extends $hyoo_harp_query >( query: Query ): string {\n\n\t\treturn Object.entries( query ).map( ([ field, harp ])=> {\n\t\t\t\n\t\t\tif( field === '+' ) return ''\n\t\t\tif( field === '=' ) return ''\n\t\t\tif( field === '!=' ) return ''\n\t\t\tif( !harp ) return ''\n\t\t\t\n\t\t\tconst order = harp['+'] === true ? '+' : harp['+'] === false ? '-' : ''\n\t\t\tconst filter = harp['='] ? '=' : harp['!='] ? '!=' : ''\n\t\t\tconst name = encodeURIComponent( field )\n\t\t\t\n\t\t\tlet values = ( ( harp['='] || harp['!='] || [] ) as unknown[][] ).map( ([ min , max ]) => {\n\n\t\t\t\tif( max === undefined || min === max ) return encodeURIComponent( String( min ) )\n\t\t\t\t\n\t\t\t\tmin = ( min === undefined ) ? '' : encodeURIComponent( String( min ) )\n\t\t\t\tmax = ( max === undefined ) ? '' : encodeURIComponent( String( max ) )\n\t\t\t\t\n\t\t\t\treturn `${ min }@${ max }`\n\n\t\t\t} ).join( ',' )\n\t\t\t\n\t\t\tlet fetch = $hyoo_harp_to_string( harp as $hyoo_harp_query )\n\t\t\tif( fetch ) fetch = `[${fetch}]`\n\n\t\t\treturn `${order}${name}${filter}${values}${fetch}`\n\t\t\t\n\t\t}).filter( Boolean ).join( ';' )\n\n\t}\n\n}\n","namespace $ {\n\t\n\tfunction check< Query extends $hyoo_harp_query<any> >( str: string, query: Query ) {\n\t\t$mol_assert_like( str, $hyoo_harp_to_string( query ) )\n\t\t$mol_assert_like( query, $hyoo_harp_from_string( str ) )\n\t}\n\t\n\t$mol_test({\n\n\t\t'root' () {\n\t\t\tcheck( '', {} )\n\t\t} ,\n\n\t\t'only field' () {\n\t\t\tcheck(\n\t\t\t\t'user%3D777',\n\t\t\t\t{\n\t\t\t\t\t'user=777': {},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'primary key' () {\n\t\t\tcheck(\n\t\t\t\t'user=jin%2C777',\n\t\t\t\t{\n\t\t\t\t\tuser: {\n\t\t\t\t\t\t'=': [[ 'jin,777' ]],\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'single fetch' () {\n\t\t\tcheck(\n\t\t\t\t'friend[age%24]',\n\t\t\t\t{\n\t\t\t\t\tfriend: {\n\t\t\t\t\t\tage$: {},\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'fetch and primary key' () {\n\t\t\tcheck(\n\t\t\t\t'user=jin[friend]',\n\t\t\t\t{\n\t\t\t\t\t'user': {\n\t\t\t\t\t\t'=': [[ 'jin' ]],\n\t\t\t\t\t\tfriend: {},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'multiple fetch' () {\n\t\t\tcheck(\n\t\t\t\t'age;friend',\n\t\t\t\t{\n\t\t\t\t\tage: {},\n\t\t\t\t\tfriend: {},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'common query string back compatible' () {\n\t\t\t$mol_assert_like(\n\t\t\t\t$hyoo_harp_from_string( 'user=jin&age=100500' ),\n\t\t\t\t{\n\t\t\t\t\tuser: {\n\t\t\t\t\t\t'=': [[ 'jin' ]],\n\t\t\t\t\t},\n\t\t\t\t\tage: {\n\t\t\t\t\t\t'=': [[ '100500' ]],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'common pathname back compatible' () {\n\t\t\t$mol_assert_like(\n\t\t\t\t$hyoo_harp_from_string( 'users/jin/comments' ),\n\t\t\t\t{\n\t\t\t\t\tusers: {},\n\t\t\t\t\tjin: {},\n\t\t\t\t\tcomments: {},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'deep fetch' () {\n\t\t\tcheck(\n\t\t\t\t'my[friend[age];name];stat',\n\t\t\t\t{\n\t\t\t\t\tmy: {\n\t\t\t\t\t\tfriend: {\n\t\t\t\t\t\t\tage: {},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname: {},\n\t\t\t\t\t},\n\t\t\t\t\tstat: {},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'orders' () {\n\t\t\tcheck(\n\t\t\t\t'+age;-name',\n\t\t\t\t{\n\t\t\t\t\tage: {\n\t\t\t\t\t\t'+': true\n\t\t\t\t\t},\n\t\t\t\t\tname: {\n\t\t\t\t\t\t'+': false\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'filter types' () {\n\t\t\tcheck(\n\t\t\t\t'sex=female;status!=married',\n\t\t\t\t{\n\t\t\t\t\tsex: {\n\t\t\t\t\t\t'=': [[ 'female' ]],\n\t\t\t\t\t},\n\t\t\t\t\tstatus: {\n\t\t\t\t\t\t'!=': [[ 'married' ]],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'filter ranges' () {\n\t\t\tcheck(\n\t\t\t\t'sex=female;age=18@25;weight=@50;height=150@;hobby=paint,singing',\n\t\t\t\t{\n\t\t\t\t\tsex: {\n\t\t\t\t\t\t'=': [[ 'female' ]],\n\t\t\t\t\t},\n\t\t\t\t\tage: {\n\t\t\t\t\t\t'=': [[ '18', '25' ]],\n\t\t\t\t\t},\n\t\t\t\t\tweight: {\n\t\t\t\t\t\t'=': [[ '', '50' ]],\n\t\t\t\t\t},\n\t\t\t\t\theight: {\n\t\t\t\t\t\t'=': [[ '150', '' ]],\n\t\t\t\t\t},\n\t\t\t\t\thobby: {\n\t\t\t\t\t\t'=': [ ['paint'], ['singing'] ],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'unescaped values' () {\n\t\t\t$mol_assert_like(\n\t\t\t\t$hyoo_harp_from_string( 'foo=jin=777;bar=jin!=666' ),\n\t\t\t\t{\n\t\t\t\t\tfoo: {\n\t\t\t\t\t\t'=': [[ 'jin=777' ]],\n\t\t\t\t\t},\n\t\t\t\t\tbar: {\n\t\t\t\t\t\t'=': [[ 'jin!=666' ]],\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'slicing' () {\n\t\t\tcheck(\n\t\t\t\t'friend[_num=0@100]',\n\t\t\t\t{\n\t\t\t\t\tfriend: {\n\t\t\t\t\t\t_num: { '=': [[ '0', '100' ]] },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'complex' () {\n\t\t\tcheck(\n\t\t\t\t'pullRequest[state=closed,merged;+repository[name;private];-updateTime;_num=0@100]',\n\t\t\t\t{\n\t\t\t\t\tpullRequest: {\n\t\t\t\t\t\tstate: {\n\t\t\t\t\t\t\t'=': [\n\t\t\t\t\t\t\t\t['closed'],\n\t\t\t\t\t\t\t\t['merged'],\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\trepository: {\n\t\t\t\t\t\t\t'+': true,\n\t\t\t\t\t\t\tname: {},\n\t\t\t\t\t\t\tprivate: {},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupdateTime: {\n\t\t\t\t\t\t\t'+': false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t_num: {\n\t\t\t\t\t\t\t'=': [[ '0', '100' ]],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t})\n\t\n}\n"]}